CourseId,UserId,CourseName,CourseContent,AreaOfStudyEnum,CurrentStatusEnum,YearsOfExperienceEnum,AchivingLevelEnum,StudyPeriodEnum,CreatedDateTime,ProgressStatusEnum
21,0,Java Beginner Course,NULL,1,1,2,1,1,2024-09-14 18:59:38.767,NULL
22,2,Beginner TypeScript Mastery in 3 Months,"{
  ""courseName"": ""Beginner TypeScript Mastery in 3 Months"",
  ""modules"": [
    {
      ""title"": ""Module 1: Introduction to TypeScript"",
      ""description"": ""Understanding the basics of TypeScript and setting up the development environment."",
      ""submodules"": [
        {
          ""title"": ""1.1 Introduction and Setup"",
          ""content"": ""Learn what TypeScript is, why it is used, and how to set up your TypeScript environment."",
          ""tutorials"": [
            {
              ""title"": ""What is TypeScript?"",
              ""content"": ""An introduction to TypeScript, its benefits, and its use cases."",
              ""resources"": [""https://www.typescriptlang.org/docs/""]
            },
            {
              ""title"": ""Setting Up TypeScript"",
              ""content"": ""Install Node.js and TypeScript. Set up a basic TypeScript project."",
              ""codeSnippets"": [
                {
                  ""language"": ""shell"",
                  ""code"": ""npm install -g typescript\n tsc --init""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Set up a new TypeScript project and compile a basic TypeScript file that logs a message to the console.""
            }
          ]
        },
        {
          ""title"": ""1.2 TypeScript Basic Types"",
          ""content"": ""Learn about different basic types available in TypeScript."",
          ""tutorials"": [
            {
              ""title"": ""Understanding Basic Types"",
              ""content"": ""Explore basic types such as boolean, number, string, array, tuple, enum, and any."",
              ""resources"": [""https://www.typescriptlang.org/docs/handbook/basic-types.html""],
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""let isDone: boolean = false;\nlet decimal: number = 6;\nlet color: string = 'blue';\nlet list: number[] = [1, 2, 3];\nlet x: [string, number];\nx = ['hello', 10];\nenum Color {Red, Green, Blue}\nlet notSure: any = 4;""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create variables utilizing different basic types and log them to the console.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Module 2: Advanced Types"",
      ""description"": ""Dive deeper into more complex types and their use."",
      ""submodules"": [
        {
          ""title"": ""2.1 Interfaces"",
          ""content"": ""Understand the purpose of interfaces and how to use them in TypeScript."",
          ""tutorials"": [
            {
              ""title"": ""Using Interfaces"",
              ""content"": ""Learn to define and implement interfaces in TypeScript."",
              ""resources"": [""https://www.typescriptlang.org/docs/handbook/interfaces.html""],
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""interface Person {\n    firstName: string;\n    lastName: string;\n}\nfunction greeter(person: Person) {\n    return 'Hello, ' + person.firstName + ' ' + person.lastName;\n}\nlet user = { firstName: 'John', lastName: 'Doe' };\ngreeter(user);""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Define an interface for a book and create a function that logs book details using that interface.""
            }
          ]
        },
        {
          ""title"": ""2.2 Union and Intersection Types"",
          ""content"": ""Learn how to work with union and intersection types."",
          ""tutorials"": [
            {
              ""title"": ""Union Types"",
              ""content"": ""Understand how to define and use union types."",
              ""resources"": [""https://www.typescriptlang.org/docs/handbook/unions-and-intersections.html""],
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""function padLeft(value: string, padding: string | number) {\n    if (typeof padding === 'number') {\n        return Array(padding + 1).join(' ') + value;\n    }\n    if (typeof padding === 'string') {\n        return padding + value;\n    }\n    throw new Error(`Expected string or number, got '${typeof padding}'.`);\n}\npadLeft('Hello world', 4);""
                }
              ]
            },
            {
              ""title"": ""Intersection Types"",
              ""content"": ""Learn how to define and use intersection types."",
              ""resources"": [""https://www.typescriptlang.org/docs/handbook/unions-and-intersections.html""],
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""interface ErrorHandling {\n    errorMessage: string;\n}\ninterface ArtWork {\n    title: string;\n}\ntype ArtWorkResult = ArtWork & ErrorHandling;\nlet artwork: ArtWorkResult = { title: 'Mona Lisa', errorMessage: 'None' };""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a function that accepts either a string or an array and returns its length.""
            },
            {
              ""description"": ""Combine two interfaces using intersection types and create an object implementing both.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Module 3: Functions and Classes"",
      ""description"": ""Master the use of functions and classes in TypeScript."",
      ""submodules"": [
        {
          ""title"": ""3.1 Functions"",
          ""content"": ""Understand how to declare and use functions, including arrow functions and function overloading."",
          ""tutorials"": [
            {
              ""title"": ""Function Basics"",
              ""content"": ""Learn about named functions, anonymous functions, and arrow functions."",
              ""resources"": [""https://www.typescriptlang.org/docs/handbook/functions.html""],
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""function add(x: number, y: number): number {\n  return x + y;\n}\nlet myAdd = function(x: number, y: number): number { return x + y; };\nlet myAddArrow = (x: number, y: number): number => x + y;""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Declare functions using different syntaxes (named, anonymous, arrow) and demonstrate their use.""
            }
          ]
        },
        {
          ""title"": ""3.2 Classes"",
          ""content"": ""Learn about the basics of classes, inheritance, and access modifiers."",
          ""tutorials"": [
            {
              ""title"": ""Using Classes"",
              ""content"": ""Define and use classes in TypeScript, including inheritance and access modifiers."",
              ""resources"": [""https://www.typescriptlang.org/docs/handbook/classes.html""],
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""class Animal {\n  private name: string;\n  constructor(theName: string) { this.name = theName; }\n  public move(distanceInMeters: number) {\n    console.log(`${this.name} moved ${distanceInMeters}m.`);\n  }\n}\nclass Snake extends Animal {\n  constructor(name: string) { super(name); }\n  move(distanceInMeters = 5) {\n    console.log('Slithering...');\n    super.move(distanceInMeters);\n  }\n}\nlet sam = new Snake('Sammy the Python');\nsam.move();""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a 'Car' class with properties 'make', 'model', and a method to display car details.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Module 4: Advanced Concepts"",
      ""description"": ""Delve into advanced TypeScript features."",
      ""submodules"": [
        {
          ""title"": ""4.1 Generics"",
          ""content"": ""Understand the use of generics for creating reusable components."",
          ""tutorials"": [
            {
              ""title"": ""Using Generics"",
              ""content"": ""Learn how to use generics in functions, interfaces, and classes."",
              ""resources"": [""https://www.typescriptlang.org/docs/handbook/generics.html""],
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""function identity<T>(arg: T): T {\n  return arg;\n}\nlet output = identity<string>('myString');""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a generic function that accepts an array and returns the first element.""
            }
          ]
        },
        {
          ""title"": ""4.2 Decorators"",
          ""content"": ""Learn how to use decorators to modify classes and properties."",
          ""tutorials"": [
            {
              ""title"": ""Using Decorators"",
              ""content"": ""Learn about class, method, and property decorators."",
              ""resources"": [""https://www.typescriptlang.org/docs/handbook/decorators.html""],
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""function sealed(constructor: Function) {\n  Object.seal(constructor);\n  Object.seal(constructor.prototype);\n}\n@sealed\nclass Greeter {\n  constructor(public greeting: string) {}\n  greet() {\n    return 'Hello, ' + this.greeting;\n  }\n}""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a class decorator that logs class instantiation.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Module 5: Asynchronous TypeScript"",
      ""description"": ""Master asynchronous programming in TypeScript using promises and async/await."",
      ""submodules"": [
        {
          ""title"": ""5.1 Promises"",
          ""content"": ""Understand how to work with promises in TypeScript."",
          ""tutorials"": [
            {
              ""title"": ""Using Promises"",
              ""content"": ""Learn how to create and handle promises."",
              ""resources"": [""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises""],
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""function delay(ms: number) {\n  return new Promise<void>((resolve) => setTimeout(resolve, ms));\n}\ndelay(1000).then(() => console.log('Executed after 1 second'));""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a promise-based function that simulates a delay and logs a message after completion.""
            }
          ]
        },
        {
          ""title"": ""5.2 Async/Await"",
          ""content"": ""Learn about async/await syntax for handling asynchronous operations."",
          ""tutorials"": [
            {
              ""title"": ""Using Async/Await"",
              ""content"": ""Understand how to refactor promise-based code to use async/await."",
              ""resources"": [""https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-1.html""],
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""async function asyncDelay(ms: number) {\n  await new Promise<void>((resolve) => setTimeout(resolve, ms));\n  console.log('Executed after 1 second');\n}\nasyncDelay(1000);""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write an async function that fetches data from an API and logs the result.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Module 6: Modules and Namespaces"",
      ""description"": ""Learn how to organize and manage code using modules and namespaces."",
      ""submodules"": [
        {
          ""title"": ""6.1 Modules"",
          ""content"": ""Understand the module system in TypeScript."",
          ""tutorials"": [
            {
              ""title"": ""Using Modules"",
              ""content"": ""Learn how to export and import modules."",
              ""resources"": [""https://www.typescriptlang.org/docs/handbook/modules.html""],
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""// math.ts\nexport function add(x: number, y: number): number {\n  return x + y;\n}\n\n// main.ts\nimport { add } from './math';\nconsole.log(add(2, 3));""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create two modules, one exporting a function and another importing and using it.""
            }
          ]
        },
        {
          ""title"": ""6.2 Namespaces"",
          ""content"": ""Learn about namespaces for organizing code."",
          ""tutorials"": [
            {
              ""title"": ""Using Namespaces"",
              ""content"": ""Understand how to declare and use namespaces."",
              ""resources"": [""https://www.typescriptlang.org/docs/handbook/namespaces.html""],
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""namespace Validation {\n  export interface StringValidator {\n    isAcceptable(s: string): boolean;\n  }\n  const lettersRegexp = /^[A-Za-z]+$/;\n  export class LettersOnlyValidator implements StringValidator {\n    isAcceptable(s: string) {\n      return lettersRegexp.test(s);\n    }\n  }\n}\nlet validator = new Validation.LettersOnlyValidator();\nconsole.log(validator.isAcceptable('Hello'));""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a namespace that contains a validator function and use it in an application.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Module 7: TypeScript with Modern Frameworks"",
      ""description"": ""Integrating TypeScript with modern front-end and back-end frameworks."",
      ""submodules"": [
        {
          ""title"": ""7.1 TypeScript with React"",
          ""content"": ""Learn how to use TypeScript in a React application."",
          ""tutorials"": [
            {
              ""title"": ""React with TypeScript"",
              ""content"": ""Setting up and using TypeScript in a React project."",
              ""resources"": [""https://react-typescript-cheatsheet.netlify.app/""],
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""import React from 'react';\ntype AppProps = { message: string; };\nconst App: React.FC<AppProps> = ({ message }) => <h1>{message}</h1>;\nexport default App;""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a simple React component using TypeScript.""
            }
          ]
        },
        {
          ""title"": ""7.2 TypeScript with Node.js"",
          ""content"": ""Learn how to use TypeScript in a Node.js application."",
          ""tutorials"": [
            {
              ""title"": ""Node.js with TypeScript"",
              ""content"": ""Setting up a Node.js project with TypeScript."",
              ""resources"": [""https://www.typescriptlang.org/docs/handbook/tsconfig-json.html""],
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""import express from 'express';\nconst app = express();\napp.get('/', (req, res) => {\n  res.send('Hello, TypeScript!');\n});\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Set up a basic Express server using TypeScript.""
            }
          ]
        }
      ]
    }
  ]
}",5,1,1,1,3,2024-09-14 19:06:05.673,NULL
23,2,Java Intermediate Level Course,"{
  ""courseName"": ""Java Intermediate Level Course"",
  ""duration"": ""3 Months"",
  ""modules"": [
    {
      ""title"": ""Advanced Object-Oriented Programming"",
      ""description"": ""Deepen your understanding of OOP principles and their applications in Java."",
      ""submodules"": [
        {
          ""title"": ""Inheritance and Polymorphism"",
          ""content"": ""Learn how to use inheritance to extend classes and how polymorphism promotes flexibility in your Java programs."",
          ""tutorials"": [
            {
              ""title"": ""Understanding Inheritance"",
              ""content"": ""Explore the concepts of base and derived classes, method overriding, and the 'super' keyword."",
              ""codeSnippets"": [
                {
                  ""language"": ""Java"",
                  ""code"": ""class Animal {\n  void eat() {\n    System.out.println(\""This animal eats food.\"");\n  }\n}\nclass Dog extends Animal {\n  void bark() {\n    System.out.println(\""The dog barks.\"");\n  }\n}\npublic class TestInheritance {\n  public static void main(String[] args) {\n    Dog d = new Dog();\n    d.eat();\n    d.bark();\n  }\n}""
                }
              ]
            },
            {
              ""title"": ""Polymorphism in Action"",
              ""content"": ""Understand how to implement polymorphic behavior using method overriding and interface implementation."",
              ""codeSnippets"": [
                {
                  ""language"": ""Java"",
                  ""code"": ""interface Animal {\n  void sound();\n}\nclass Dog implements Animal {\n  public void sound() {\n    System.out.println(\""Barks\"");\n  }\n}\nclass Cat implements Animal {\n  public void sound() {\n    System.out.println(\""Meows\"");\n  }\n}\npublic class TestPolymorphism {\n  public static void main(String[] args) {\n    Animal a;\n    a = new Dog();\n    a.sound();\n    a = new Cat();\n    a.sound();\n  }\n}""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create an inheritance tree for a transportation system where all transport modes are derived from a base class 'Transport'. Implement polymorphic methods such as 'move'.""
            }
          ]
        },
        {
          ""title"": ""Abstract Classes and Interfaces"",
          ""content"": ""Focus on the use cases and implementations of abstract classes and interfaces in Java."",
          ""tutorials"": [
            {
              ""title"": ""Abstract Classes"",
              ""content"": ""Learn about the structure and uses of abstract classes in Java."",
              ""codeSnippets"": [
                {
                  ""language"": ""Java"",
                  ""code"": ""abstract class Shape {\n  abstract void draw();\n  void display() {\n    System.out.println(\""Displaying shape\"");\n  }\n}\nclass Circle extends Shape {\n  void draw() {\n    System.out.println(\""Drawing Circle\"");\n  }\n}\npublic class TestAbstract {\n  public static void main(String[] args) {\n    Circle c = new Circle();\n    c.draw();\n    c.display();\n  }\n}""
                }
              ]
            },
            {
              ""title"": ""Interfaces"",
              ""content"": ""Understand the role of interfaces and how to implement them."",
              ""codeSnippets"": [
                {
                  ""language"": ""Java"",
                  ""code"": ""interface Drawable {\n  void draw();\n}\nclass Rectangle implements Drawable {\n  public void draw() {\n    System.out.println(\""Drawing Rectangle\"");\n  }\n}\nclass Circle implements Drawable {\n  public void draw() {\n    System.out.println(\""Drawing Circle\"");\n  }\n}\npublic class TestInterface {\n  public static void main(String[] args) {\n    Drawable d = new Circle();\n    d.draw();\n  }\n}""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Design an abstract class 'Appliance' with an abstract method 'turnOn'. Implement specific appliance subclasses (e.g., Washer, Microwave) and demonstrate polymorphism.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Java Collections Framework"",
      ""description"": ""Master the use of Java Collections for efficient data storage and manipulation."",
      ""submodules"": [
        {
          ""title"": ""Understanding Lists"",
          ""content"": ""Learn about the List interface, ArrayList, LinkedList, and their usage scenarios."",
          ""tutorials"": [
            {
              ""title"": ""ArrayList Basics"",
              ""content"": ""Understand the functionalities and advantages of using ArrayList."",
              ""codeSnippets"": [
                {
                  ""language"": ""Java"",
                  ""code"": ""import java.util.ArrayList;\npublic class TestArrayList {\n  public static void main(String[] args) {\n    ArrayList<String> list = new ArrayList<String>();\n    list.add(\""Apple\"");\n    list.add(\""Banana\"");\n    list.add(\""Orange\"");\n    for (String fruit : list) {\n      System.out.println(fruit);\n    }\n  }\n}""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create an application to manage a list of students using ArrayList. Add functionalities to add, remove, and display students.""
            }
          ]
        },
        {
          ""title"": ""Working with Maps"",
          ""content"": ""Dive deep into HashMap, TreeMap, and LinkedHashMap usages and differences."",
          ""tutorials"": [
            {
              ""title"": ""HashMap Usage"",
              ""content"": ""Learn how to use HashMap for storing key-value pairs."",
              ""codeSnippets"": [
                {
                  ""language"": ""Java"",
                  ""code"": ""import java.util.HashMap;\npublic class TestHashMap {\n  public static void main(String[] args) {\n    HashMap<Integer, String> map = new HashMap<Integer, String>();\n    map.put(1, \""Apple\"");\n    map.put(2, \""Banana\"");\n    map.put(3, \""Orange\"");\n    for (HashMap.Entry<Integer, String> m : map.entrySet()) {\n      System.out.println(m.getKey() + \"" \"" + m.getValue());\n    }\n  }\n}""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Implement a phonebook application using HashMap where you can add, remove, and search for contacts by name and phone number.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Exception Handling and Debugging"",
      ""description"": ""Master error handling and debugging techniques to write robust Java applications."",
      ""submodules"": [
        {
          ""title"": ""Exception Hierarchy"",
          ""content"": ""Understand the different types of exceptions and how they are related in Java."",
          ""tutorials"": [
            {
              ""title"": ""Checked vs Unchecked Exceptions"",
              ""content"": ""Learn the difference between checked and unchecked exceptions and their handling."",
              ""codeSnippets"": [
                {
                  ""language"": ""Java"",
                  ""code"": ""import java.io.*;\npublic class TestException {\n  public static void main(String[] args) {\n    try {\n      FileReader file = new FileReader(\""test.txt\"");\n      BufferedReader fileInput = new BufferedReader(file);\n      for (int counter = 0; counter < 3; counter++)\n        System.out.println(fileInput.readLine());\n      fileInput.close();\n    } catch (FileNotFoundException e) {\n      System.out.println(\""File not found\"");\n    } catch (IOException e) {\n      System.out.println(\""IOException\"");\n    }\n  }\n}""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Implement a file reading application that gracefully handles FileNotFoundException and IOException.""
            }
          ]
        },
        {
          ""title"": ""Creating Custom Exceptions"",
          ""content"": ""Learn how to create and use your own exceptions in Java."",
          ""tutorials"": [
            {
              ""title"": ""Defining a Custom Exception"",
              ""content"": ""Step-by-step guide to create a custom exception and use it in your application."",
              ""codeSnippets"": [
                {
                  ""language"": ""Java"",
                  ""code"": ""class MyException extends Exception {\n  MyException(String s) {\n    super(s);\n  }\n}\npublic class TestCustomException {\n  public static void main(String args[]) {\n    try {\n      throw new MyException(\""Custom exception occurred\"");\n    } catch (MyException ex) {\n      System.out.println(\""Caught\"");\n      System.out.println(ex.getMessage());\n    }\n  }\n}""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a custom exception 'InvalidAgeException' that should be thrown when an invalid age (<0 or >150) is entered.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Multithreading"",
      ""description"": ""Explore concurrent programming in Java using threads to build responsive and efficient applications."",
      ""submodules"": [
        {
          ""title"": ""Thread Basics"",
          ""content"": ""Understand the fundamentals of creating and managing threads in Java."",
          ""tutorials"": [
            {
              ""title"": ""Creating Threads"",
              ""content"": ""Learn three ways to create a thread: by extending Thread class, by implementing Runnable interface, and using ExecutorService."",
              ""codeSnippets"": [
                {
                  ""language"": ""Java"",
                  ""code"": ""class MyThread extends Thread {\n  public void run() {\n    System.out.println(\""Thread is running.\"");\n  }\n}\npublic class TestThread {\n  public static void main(String[] args) {\n    MyThread t = new MyThread();\n    t.start();\n  }\n}""
                },
                {
                  ""language"": ""Java"",
                  ""code"": ""class MyRunnable implements Runnable {\n  public void run() {\n    System.out.println(\""Runnable thread is running.\"");\n  }\n}\npublic class TestRunnable {\n  public static void main(String[] args) {\n    Thread t = new Thread(new MyRunnable());\n    t.start();\n  }\n}""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a Java application that runs two threads concurrently: one for printing numbers from 1 to 10 and another for printing even numbers from 2 to 20.""
            }
          ]
        },
        {
          ""title"": ""Synchronization"",
          ""content"": ""Learn about thread synchronization and how to avoid race conditions."",
          ""tutorials"": [
            {
              ""title"": ""Synchronized Methods"",
              ""content"": ""Use synchronized methods to control access to critical sections of code."",
              ""codeSnippets"": [
                {
                  ""language"": ""Java"",
                  ""code"": ""class Counter {\n  private int count = 0;\n  public synchronized void increment() {\n    count++;\n  }\n  public synchronized int getCount() {\n    return count;\n  }\n}\nclass CounterThread extends Thread {\n  private Counter counter;\n  CounterThread(Counter counter) {\n    this.counter = counter;\n  }\n  public void run() {\n    for (int i = 0; i < 1000; i++) {\n      counter.increment();\n    }\n  }\n}\npublic class TestSynchronization {\n  public static void main(String[] args) throws InterruptedException {\n    Counter counter = new Counter();\n    CounterThread t1 = new CounterThread(counter);\n    CounterThread t2 = new CounterThread(counter);\n    t1.start();\n    t2.start();\n    t1.join();\n    t2.join();\n    System.out.println(\""Final Counter: \"" + counter.getCount());\n  }\n}""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a synchronized block to ensure thread-safe increment and decrement operations on a shared counter variable.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Java Input/Output (IO) and NIO"",
      ""description"": ""Learn how to handle input and output operations in Java using the legacy IO and NIO packages."",
      ""submodules"": [
        {
          ""title"": ""File Handling"",
          ""content"": ""Understand how to read from and write to files using Java IO classes."",
          ""tutorials"": [
            {
              ""title"": ""Reading a File"",
              ""content"": ""Learn to read the contents of a text file using FileReader and BufferedReader."",
              ""codeSnippets"": [
                {
                  ""language"": ""Java"",
                  ""code"": ""import java.io.*;\npublic class TestFileRead {\n  public static void main(String[] args) {\n    try {\n      BufferedReader reader = new BufferedReader(new FileReader(\""input.txt\""));\n      String line;\n      while ((line = reader.readLine()) != null) {\n        System.out.println(line);\n      }\n      reader.close();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}""
                }
              ]
            },
            {
              ""title"": ""Writing to a File"",
              ""content"": ""Learn to write data to a text file using FileWriter and BufferedWriter."",
              ""codeSnippets"": [
                {
                  ""language"": ""Java"",
                  ""code"": ""import java.io.*;\npublic class TestFileWrite {\n  public static void main(String[] args) {\n    try {\n      BufferedWriter writer = new BufferedWriter(new FileWriter(\""output.txt\""));\n      writer.write(\""Hello, World!\"");\n      writer.close();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a Java program that reads a file line by line and writes each line to another file, converting all text to uppercase.""
            }
          ]
        },
        {
          ""title"": ""Java NIO"",
          ""content"": ""Explore the capabilities of the NIO package for handling IO operations more efficiently."",
          ""tutorials"": [
            {
              ""title"": ""Using Channels and Buffers"",
              ""content"": ""Learn about NIO channels and buffers and their advantages over legacy IO."",
              ""codeSnippets"": [
                {
                  ""language"": ""Java"",
                  ""code"": ""import java.nio.file.*;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\npublic class TestNIO {\n  public static void main(String[] args) {\n    try {\n      Path path = Paths.get(\""input.txt\"");\n      FileChannel fileChannel = FileChannel.open(path, StandardOpenOption.READ);\n      ByteBuffer buffer = ByteBuffer.allocate(1024);\n      int bytesRead = fileChannel.read(buffer);\n      while (bytesRead != -1) {\n        buffer.flip();\n        while (buffer.hasRemaining()) {\n          System.out.print((char) buffer.get());\n        }\n        buffer.clear();\n        bytesRead = fileChannel.read(buffer);\n      }\n      fileChannel.close();\n    } catch (IOException ex) {\n      ex.printStackTrace();\n    }\n  }\n}""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a Java application using NIO channels and buffers to copy content from one file to another.""
            }
          ]
        }
      ]
    }
  ]
}",1,1,2,2,3,2024-09-15 14:11:18.103,1
24,2,Beginner MATLAB Course,"{
    ""courseName"": ""Beginner MATLAB Course"",
    ""modules"": [
        {
            ""title"": ""Module 1: MATLAB Basics"",
            ""description"": ""Understand the fundamental concepts and basics of MATLAB."",
            ""submodules"": [
                {
                    ""title"": ""Introduction to MATLAB"",
                    ""content"": ""Learn the basics of MATLAB environment, including its interface and basic commands."",
                    ""tutorials"": [
                        {
                            ""title"": ""Getting Started with MATLAB"",
                            ""content"": ""Learn how to start MATLAB, understand the interface, and execute basic commands."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""MATLAB"",
                                    ""code"": ""% Opening MATLAB\nclc; clear; close all;\n\n% Basic Commands\nx = 5;\ny = 10;\nz = x + y;\ndisp(z); % Display the result\n""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Open MATLAB and execute basic addition of two numbers.""
                        }
                    ]
                },
                {
                    ""title"": ""Basic MATLAB Operations"",
                    ""content"": ""Detailed explanation of basic operations such as arithmetic operations, variables, and data types."",
                    ""tutorials"": [
                        {
                            ""title"": ""Arithmetic Operations and Variables"",
                            ""content"": ""Learn how to perform arithmetic operations and work with variables."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""MATLAB"",
                                    ""code"": ""% Variables and Arithmetic Operations\nx = 8;\ny = 4;\nsum = x + y;\ndiff = x - y;\nmul = x * y;\ndiv = x / y; \ndisp(sum); disp(diff); disp(mul); disp(div);\n""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Perform basic arithmetic operations with different variables and display the results.""
                        }
                    ]
                }
            ]
        },
        {
            ""title"": ""Module 2: Control Flow and Functions"",
            ""description"": ""Learn about control flow statements and functions in MATLAB."",
            ""submodules"": [
                {
                    ""title"": ""Control Flow Statements"",
                    ""content"": ""Understand the use of if-else statements, switch statements, and loops in MATLAB."",
                    ""tutorials"": [
                        {
                            ""title"": ""Using If-Else Statements"",
                            ""content"": ""Learn how to use if-else statements for conditional execution."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""MATLAB"",
                                    ""code"": ""% If-Else Statements\nx = 4;\nif x > 5\n	disp('x is greater than 5');\nelse\n	disp('x is less than or equal to 5');\nend\n""
                                }
                            ]
                        },
                        {
                            ""title"": ""Using For and While Loops"",
                            ""content"": ""Learn how to use loops to repeat a set of commands."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""MATLAB"",
                                    ""code"": ""% For Loop\nfor i = 1:5\n	disp(['Iteration: ', num2str(i)]);\nend\n\n% While Loop\nj = 1;\nwhile j <= 5\n	disp(['Iteration: ', num2str(j)]);\n	j = j + 1;\nend\n""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Write a script using if-else statements to check if a number is positive, negative, or zero.""
                        },
                        {
                            ""description"": ""Create a loop to display numbers from 1 to 10.""
                        }
                    ]
                },
                {
                    ""title"": ""Functions in MATLAB"",
                    ""content"": ""Learn how to define and use functions for modular code."",
                    ""tutorials"": [
                        {
                            ""title"": ""Defining and Calling Functions"",
                            ""content"": ""Understand how to define a function and call it from the main script."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""MATLAB"",
                                    ""code"": ""% Function Definition\nfunction result = addNumbers(a, b)\n	result = a + b;\nend\n\n% Calling the Function\nsum = addNumbers(3, 7);\ndisp(sum);\n""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Write a function to multiply two numbers and call it from the main script.""
                        }
                    ]
                }
            ]
        },
        {
            ""title"": ""Module 3: Arrays and Matrices"",
            ""description"": ""Understand array and matrix operations in MATLAB."",
            ""submodules"": [
                {
                    ""title"": ""Working with Arrays"",
                    ""content"": ""Learn how to create, manipulate, and access arrays."",
                    ""tutorials"": [
                        {
                            ""title"": ""Creating and Accessing Arrays"",
                            ""content"": ""Understand the syntax for creating arrays and accessing their elements."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""MATLAB"",
                                    ""code"": ""% Creating Arrays\narray = [1, 2, 3, 4, 5];\n\n% Accessing Array Elements\nfirstElement = array(1);\nlastElement = array(end);\ndisp(firstElement); disp(lastElement);\n""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Create an array of 10 numbers and display the first and last elements.""
                        }
                    ]
                },
                {
                    ""title"": ""Matrix Operations"",
                    ""content"": ""Learn about matrices in MATLAB and how to perform operations on them."",
                    ""tutorials"": [
                        {
                            ""title"": ""Creating and Manipulating Matrices"",
                            ""content"": ""Understand how to create matrices and perform basic operations."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""MATLAB"",
                                    ""code"": ""% Creating Matrices\nmatrix = [1, 2; 3, 4; 5, 6];\n\n% Matrix Operations\ntransposeMatrix = matrix'; % Transpose\nsumMatrix = sum(matrix); % Sum of each column\ndisp(transposeMatrix); disp(sumMatrix);\n""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Create a 3x3 matrix and calculate its transpose.""
                        }
                    ]
                }
            ]
        },
        {
            ""title"": ""Module 4: Plotting and Visualization"",
            ""description"": ""Learn how to visualize data using different types of plots in MATLAB."",
            ""submodules"": [
                {
                    ""title"": ""Basic Plotting"",
                    ""content"": ""Understand how to create basic plots in MATLAB."",
                    ""tutorials"": [
                        {
                            ""title"": ""Line Plot"",
                            ""content"": ""Learn how to create a simple line plot."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""MATLAB"",
                                    ""code"": ""% Line Plot\nx = linspace(0, 2*pi, 100);\ny = sin(x);\nplot(x, y);\ntitle('Sine Wave');\nxlabel('x');\nylabel('sin(x)');\n""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Create a line plot for cosine function.""
                        }
                    ]
                },
                {
                    ""title"": ""Advanced Plotting"",
                    ""content"": ""Learn how to create advanced plots like scatter plot, bar plot, and histograms."",
                    ""tutorials"": [
                        {
                            ""title"": ""Scatter Plot"",
                            ""content"": ""Learn how to create a scatter plot."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""MATLAB"",
                                    ""code"": ""% Scatter Plot\nx = randn(100, 1);\ny = randn(100, 1);\nscatter(x, y);\ntitle('Random Scatter Plot');\nxlabel('x');\nylabel('y');\n""
                                }
                            ]
                        },
                        {
                            ""title"": ""Bar Plot"",
                            ""content"": ""Learn how to create a bar plot."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""MATLAB"",
                                    ""code"": ""% Bar Plot\ndata = [3, 5, 2, 8, 7];\nbar(data);\ntitle('Bar Plot');\nxlabel('Categories');\nylabel('Values');\n""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Create a bar plot for a set of values representing different categories.""
                        }
                    ]
                }
            ]
        },
        {
            ""title"": ""Module 5: Data Import and Export"",
            ""description"": ""Learn how to import and export data in MATLAB."",
            ""submodules"": [
                {
                    ""title"": ""Importing Data"",
                    ""content"": ""Understand how to import data from different file formats."",
                    ""tutorials"": [
                        {
                            ""title"": ""Importing CSV Files"",
                            ""content"": ""Learn how to import data from CSV files."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""MATLAB"",
                                    ""code"": ""% Importing CSV Data\ndata = readtable('data.csv');\ndisp(data);\n""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Import data from a CSV file and display the first few rows.""
                        }
                    ]
                },
                {
                    ""title"": ""Exporting Data"",
                    ""content"": ""Learn how to export data to different file formats."",
                    ""tutorials"": [
                        {
                            ""title"": ""Exporting to CSV Files"",
                            ""content"": ""Understand how to export MATLAB data to CSV files."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""MATLAB"",
                                    ""code"": ""% Exporting Data to CSV\narray = [1, 2, 3; 4, 5, 6; 7, 8, 9];\nwritematrix(array, 'output.csv');\n""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Create a matrix and export it to a CSV file.""
                        }
                    ]
                }
            ]
        }
    ]
}",18,1,2,1,1,2024-09-15 19:00:16.797,1
25,2,Dart Expert Mastery,"{
  ""courseName"": ""Dart Expert Mastery"",
  ""duration"": ""3 months"",
  ""modules"": [
    {
      ""title"": ""Advanced Dart Syntax and Concepts"",
      ""description"": ""Deep dive into advanced Dart syntax, language features, and best practices."",
      ""submodules"": [
        {
          ""title"": ""Advanced Data Structures"",
          ""content"": ""In-depth exploration of advanced data structures like linked lists, trees, graphs, and their implementation in Dart."",
          ""tutorials"": [
            {
              ""title"": ""Implementing Linked Lists in Dart"",
              ""content"": ""Learn how to implement and manipulate linked lists."",
              ""codeSnippets"": [
                {
                  ""language"": ""Dart"",
                  ""code"": ""class Node {\n  int? value;\n  Node? next;\n\n  Node(this.value);\n}\n\nclass LinkedList {\n  Node? head;\n\n  void add(int value) {\n    if (head == null) {\n      head = Node(value);\n    } else {\n      Node current = head!;\n      while (current.next != null) {\n        current = current.next!;\n      }\n      current.next = Node(value);\n    }\n  }\n\n  void printList() {\n    Node? current = head;\n    while (current != null) {\n      print(current.value);\n      current = current.next;\n    }\n  }\n}\n""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Implement a binary search tree in Dart and include methods for insertion, deletion, and traversal.""
            }
          ]
        },
        {
          ""title"": ""Functional Programming in Dart"",
          ""content"": ""Explore functional programming paradigms within Dart, including higher-order functions, closures, and immutability."",
          ""tutorials"": [
            {
              ""title"": ""Understanding Closures in Dart"",
              ""content"": ""Learn how closures work and how to effectively use them."",
              ""codeSnippets"": [
                {
                  ""language"": ""Dart"",
                  ""code"": ""Function makeAdder(int addValue) {\n  return (int i) => addValue + i;\n}\n\nvoid main() {\n  var add2 = makeAdder(2);\n  var add5 = makeAdder(5);\n\n  print(add2(3)); // 5\n  print(add5(3)); // 8\n}\n""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a set of functions that utilize functional programming techniques to process a list of integers.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Dart for Server-Side Development"",
      ""description"": ""Learn to use Dart for building scalable and high-performance backend services."",
      ""submodules"": [
        {
          ""title"": ""Setting Up a Dart Server"",
          ""content"": ""Introduction to setting up a server using Dart's `dart:io` library."",
          ""tutorials"": [
            {
              ""title"": ""Building a Basic HTTP Server"",
              ""content"": ""Learn to create a basic HTTP server using Dart."",
              ""codeSnippets"": [
                {
                  ""language"": ""Dart"",
                  ""code"": ""import 'dart:io';\n\nvoid main() {\n  var server = await HttpServer.bind(InternetAddress.loopbackIPv4, 8080);\n  print('Listening on localhost:${server.port}');\n\n  await for (HttpRequest request in server) {\n    request.response\n      ..headers.contentType = ContentType.text\n      ..write('Hello, world')\n      ..close();\n  }\n}\n""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Expand the basic HTTP server to handle different routes and return JSON responses.""
            }
          ]
        },
        {
          ""title"": ""Using Frameworks like Aqueduct and Shelf"",
          ""content"": ""Detailed guide on using server-side frameworks in Dart."",
          ""tutorials"": [
            {
              ""title"": ""Creating a REST API with Shelf"",
              ""content"": ""Step-by-step instructions for building a RESTful API using Shelf."",
              ""codeSnippets"": [
                {
                  ""language"": ""Dart"",
                  ""code"": ""import 'package:shelf/shelf.dart';\nimport 'package:shelf/shelf_io.dart' as io;\n\nvoid main() async {\n  var handler = const Pipeline()\n      .addMiddleware(logRequests())\n      .addHandler(_echoRequest);\n\n  await io.serve(handler, 'localhost', 8080);\n  print('Serving at http://localhost:8080');\n}\n\nResponse _echoRequest(Request request) {\n  return Response.ok('Request for \""${request.url}\""');\n}\n""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Build a complete CRUD API using Aqueduct or Shelf, including authentication and authorization.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Concurrency and Asynchronous Programming"",
      ""description"": ""Mastering concurrency and async programming to build efficient and responsive applications."",
      ""submodules"": [
        {
          ""title"": ""Future, Stream, and Async/Await"",
          ""content"": ""Learn about Dart futures, streams, and how to use async/await for managing asynchronous operations."",
          ""tutorials"": [
            {
              ""title"": ""Managing Concurrent Operations with Future"",
              ""content"": ""Explore how to use the Future class for concurrent operations."",
              ""codeSnippets"": [
                {
                  ""language"": ""Dart"",
                  ""code"": ""Future<void> fetchUserOrder() {\n  return Future.delayed(Duration(seconds: 2), () => print('Large Latte'));\n}\n\nvoid main() async {\n  print('Fetching user order...');\n  await fetchUserOrder();\n  print('Order fetched');\n}\n""
                }
              ]
            },
            {
              ""title"": ""Handling Multiple Streams"",
              ""content"": ""Learn to effectively handle multiple data streams."",
              ""codeSnippets"": [
                {
                  ""language"": ""Dart"",
                  ""code"": ""import 'dart:async';\n\nvoid main() {\n  Stream<int> stream1 = Stream.periodic(Duration(seconds: 1), (count) => count).take(5);\n  Stream<int> stream2 = Stream.periodic(Duration(seconds: 2), (count) => count).take(3);\n\n  StreamZip([stream1, stream2]).listen((data) {\n    print(data);\n  });\n}\n""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a Dart application that uses Future, Stream, and async/await to fetch and process data from multiple sources concurrently.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Testing and Debugging"",
      ""description"": ""Advanced techniques for testing and debugging Dart applications."",
      ""submodules"": [
        {
          ""title"": ""Unit Testing and Mocks"",
          ""content"": ""Learn to write extensive unit tests and utilize mocks for dependency isolation."",
          ""tutorials"": [
            {
              ""title"": ""Writing Unit Tests with package:test"",
              ""content"": ""Guide to writing unit tests using the test package."",
              ""codeSnippets"": [
                {
                  ""language"": ""Dart"",
                  ""code"": ""import 'package:test/test.dart';\n\nint add(int a, int b) => a + b;\n\nvoid main() {\n  test('addition', () {\n    expect(add(2, 3), equals(5));\n  });\n}\n""
                }
              ]
            },
            {
              ""title"": ""Using Mocking Libraries"",
              ""content"": ""Learn to use mocking libraries to isolate dependencies."",
              ""codeSnippets"": [
                {
                  ""language"": ""Dart"",
                  ""code"": ""import 'package:mockito/mockito.dart';\nimport 'package:test/test.dart';\n\nclass FetchData {\n  Future<String> fetchData() async {\n    return 'data';\n  }\n}\n\nclass MockFetchData extends Mock implements FetchData {}\n\nvoid main() {\n  MockFetchData mockFetchData;\n\n  setUp(() {\n    mockFetchData = MockFetchData();\n  });\n\n  test('fetchData returns data', () async {\n    when(mockFetchData.fetchData()).thenAnswer((_) async => 'mocked data');\n    expect(await mockFetchData.fetchData(), 'mocked data');\n  });\n}\n""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create unit tests for a Dart application and use mocking to test components in isolation.""
            }
          ]
        },
        {
          ""title"": ""Debugging Techniques"",
          ""content"": ""Comprehensive guide to debugging in Dart, using tools like Dart DevTools."",
          ""tutorials"": [
            {
              ""title"": ""Using Dart DevTools for Debugging"",
              ""content"": ""Learn to use Dart DevTools to debug Dart applications."",
              ""codeSnippets"": []
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Debug a complex Dart application using Dart DevTools, identify and fix bugs.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Performance Optimization"",
      ""description"": ""Advanced strategies for optimizing the performance of Dart applications."",
      ""submodules"": [
        {
          ""title"": ""Memory Management"",
          ""content"": ""Techniques for managing and optimizing memory usage in Dart applications."",
          ""tutorials"": [
            {
              ""title"": ""Analyzing Memory Usage with DevTools"",
              ""content"": ""Guide to using Dart DevTools for memory analysis."",
              ""codeSnippets"": []
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Analyze and optimize memory usage for a Dart application.""
            }
          ]
        },
        {
          ""title"": ""Optimizing Dart Code"",
          ""content"": ""Best practices for writing optimized Dart code."",
          ""tutorials"": [
            {
              ""title"": ""Avoiding Common Performance Pitfalls"",
              ""content"": ""Learn to recognize and avoid common performance issues."",
              ""codeSnippets"": [
                {
                  ""language"": ""Dart"",
                  ""code"": ""// Inefficient code example\nList<int> filterEvenNumbers(List<int> numbers) {\n  var evenNumbers = [];\n  for (var number in numbers) {\n    if (number % 2 == 0) {\n      evenNumbers.add(number);\n    }\n  }\n  return evenNumbers;\n}\n\n// Optimized code example\nList<int> filterEvenNumbers(List<int> numbers) {\n  return numbers.where((number) => number % 2 == 0).toList();\n}\n""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Optimize an existing Dart project by identifying and fixing performance issues.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Deployment and Production"",
      ""description"": ""Strategies for deploying and maintaining Dart applications in production environments."",
      ""submodules"": [
        {
          ""title"": ""Continuous Integration and Delivery (CI/CD)"",
          ""content"": ""Learn to set up CI/CD pipelines for Dart applications."",
          ""tutorials"": [
            {
              ""title"": ""Setting Up CI with GitHub Actions"",
              ""content"": ""Guide to setting up a CI pipeline using GitHub Actions."",
              ""codeSnippets"": [
                {
                  ""language"": ""YAML"",
                  ""code"": ""name: Dart CI\n\non: [push, pull_request]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Dart\n      uses: dart-lang/setup-dart@v1\n    - name: Install dependencies\n      run: dart pub get\n    - name: Run tests\n      run: dart test\n""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Set up a complete CI/CD pipeline for a Dart application using GitHub Actions or another CI/CD tool.""
            }
          ]
        },
        {
          ""title"": ""Monitoring and Maintenance"",
          ""content"": ""Techniques for monitoring Dart applications and ensuring their reliability in production."",
          ""tutorials"": [
            {
              ""title"": ""Implementing Application Monitoring"",
              ""content"": ""Learn to use monitoring tools to ensure the health of Dart applications."",
              ""codeSnippets"": []
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Set up monitoring for a Dart application and create a plan for maintaining it in production.""
            }
          ]
        }
      ]
    }
  ]
}",16,1,2,4,3,2024-09-15 20:08:33.013,1
26,2,Mastering C# in 3 Months,"{
    ""courseName"": ""Mastering C# in 3 Months"",
    ""modules"": [
        {
            ""title"": ""Advanced Language Features"",
            ""description"": ""Delve deeper into more complex language features and best practices."",
            ""submodules"": [
                {
                    ""title"": ""Generics"",
                    ""content"": ""Learn to use generics to write reusable and type-safe code."",
                    ""tutorials"": [
                        {
                            ""title"": ""Understanding Generics in C#"",
                            ""content"": ""A comprehensive guide to using generics with examples."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""C#"",
                                    ""code"": ""public class GenericList<T> \n{ \n    private T[] items; \n    public void Add(T item) \n    { \n        // Add item to list \n    } \n}""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Implement a generic stack data structure.""
                        }
                    ]
                },
                {
                    ""title"": ""LINQ (Language Integrated Query)"",
                    ""content"": ""Master the use of LINQ to query collections in a more readable and concise way."",
                    ""tutorials"": [
                        {
                            ""title"": ""LINQ Fundamentals"",
                            ""content"": ""Learn the fundamentals of LINQ, including syntax and basic operations."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""C#"",
                                    ""code"": ""var result = from item in items \n             where item > 10 \n             select item;""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Use LINQ to filter, sort, and group data from a list of objects.""
                        }
                    ]
                },
                {
                    ""title"": ""Asynchronous Programming"",
                    ""content"": ""Explore async programming to handle I/O-bound and CPU-bound operations efficiently."",
                    ""tutorials"": [
                        {
                            ""title"": ""Async and Await in C#"",
                            ""content"": ""A deep dive into async/await pattern for asynchronous programming."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""C#"",
                                    ""code"": ""public async Task FetchDataAsync() \n{ \n    var data = await GetDataFromServiceAsync(); \n    // process data \n}""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Implement an async method to fetch data from an API and process it.""
                        }
                    ]
                }
            ]
        },
        {
            ""title"": ""Design Patterns"",
            ""description"": ""Understand and implement common design patterns to solve frequent problems."",
            ""submodules"": [
                {
                    ""title"": ""Creational Patterns"",
                    ""content"": ""Learn factory method, abstract factory, singleton, and builder patterns."",
                    ""tutorials"": [
                        {
                            ""title"": ""Singleton Pattern in C#"",
                            ""content"": ""Implement the singleton pattern to ensure a class has only one instance and provide a global point of access to it."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""C#"",
                                    ""code"": ""public class Singleton \n{ \n    private static Singleton instance; \n    private Singleton() { } \n    public static Singleton Instance \n    { \n        get \n        { \n            if (instance == null) \n            { \n                instance = new Singleton(); \n            } \n            return instance; \n        } \n    } \n}""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Implement a factory method pattern to create different types of objects based on input.""
                        }
                    ]
                },
                {
                    ""title"": ""Structural Patterns"",
                    ""content"": ""Learn adapter, decorator, and facade patterns."",
                    ""tutorials"": [
                        {
                            ""title"": ""Adapter Pattern in C#"",
                            ""content"": ""Implement the adapter pattern to allow two incompatible interfaces to work together."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""C#"",
                                    ""code"": ""public interface ITarget \n{ \n    void Request(); \n} \npublic class Adaptee \n{ \n    public void SpecificRequest() { } \n} \npublic class Adapter : ITarget \n{ \n    private Adaptee adaptee = new Adaptee(); \n    public void Request() \n    { \n        adaptee.SpecificRequest(); \n    } \n}""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Implement a facade pattern to simplify interactions with a complex system.""
                        }
                    ]
                },
                {
                    ""title"": ""Behavioral Patterns"",
                    ""content"": ""Learn observer, strategy, and command patterns."",
                    ""tutorials"": [
                        {
                            ""title"": ""Observer Pattern in C#"",
                            ""content"": ""Implement the observer pattern to allow an object to notify other objects about state changes."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""C#"",
                                    ""code"": ""public class Subject \n{ \n    private List<IObserver> observers = new List<IObserver>(); \n    public void Attach(IObserver observer) \n    { \n        observers.Add(observer); \n    } \n    public void Notify() \n    { \n        foreach (var observer in observers) \n        { \n            observer.Update(); \n        } \n    } \n}""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Implement a strategy pattern to switch between different algorithms at runtime.""
                        }
                    ]
                }
            ]
        },
        {
            ""title"": ""Advanced Topics"",
            ""description"": ""Explore advanced C# topics and techniques."",
            ""submodules"": [
                {
                    ""title"": ""Reflection and Metadata"",
                    ""content"": ""Learn to use reflection to examine and interact with metadata."",
                    ""tutorials"": [
                        {
                            ""title"": ""Reflection in C#"",
                            ""content"": ""Understand and use reflection to inspect and modify code at runtime."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""C#"",
                                    ""code"": ""Type type = typeof(MyClass); \nPropertyInfo prop = type.GetProperty(\""MyProperty\""); \nobject value = prop.GetValue(instance, null);""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Use reflection to create an object browser that lists all properties and methods of a given object.""
                        }
                    ]
                },
                {
                    ""title"": ""Memory Management and Performance Optimization"",
                    ""content"": ""Master memory management techniques and performance optimization strategies."",
                    ""tutorials"": [
                        {
                            ""title"": ""Garbage Collection in C#"",
                            ""content"": ""Understand how garbage collection works in .NET and how to optimize for performance."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""C#"",
                                    ""code"": ""// Example of forcing garbage collection \nGC.Collect();""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Analyze and optimize the performance of a given piece of code to reduce memory usage and execution time.""
                        }
                    ]
                },
                {
                    ""title"": ""Security in C#"",
                    ""content"": ""Learn about common security concerns and best practices in C#."",
                    ""tutorials"": [
                        {
                            ""title"": ""Secure Coding Practices"",
                            ""content"": ""Best practices for writing secure C# code, including input validation and cryptography."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""C#"",
                                    ""code"": ""// Example of hashing a password \nusing (SHA256 sha256Hash = SHA256.Create()) \n{ \n    byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(password)); \n}""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Implement a secure login system that hashes and verifies passwords.""
                        }
                    ]
                }
            ]
        },
        {
            ""title"": ""Web Development with ASP.NET Core"",
            ""description"": ""Build robust web applications using ASP.NET Core."",
            ""submodules"": [
                {
                    ""title"": ""Building RESTful Services"",
                    ""content"": ""Learn to create RESTful web services using ASP.NET Core."",
                    ""tutorials"": [
                        {
                            ""title"": ""Building a Simple RESTful Service"",
                            ""content"": ""Step-by-step tutorial on creating a RESTful service with CRUD operations."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""C#"",
                                    ""code"": ""public class ProductsController : ControllerBase \n{ \n    [HttpGet] \n    public IEnumerable<Product> GetAll() \n    { \n        return dbContext.Products.ToList(); \n    } \n}""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Create a RESTful API for a library system, including endpoints for books and authors.""
                        }
                    ]
                },
                {
                    ""title"": ""Authentication and Authorization"",
                    ""content"": ""Implement authentication and authorization in ASP.NET Core applications."",
                    ""tutorials"": [
                        {
                            ""title"": ""JWT Authentication"",
                            ""content"": ""Set up JWT (JSON Web Token) authentication in your ASP.NET Core application."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""C#"",
                                    ""code"": ""services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme) \n                .AddJwtBearer(options => \n{ \n    options.TokenValidationParameters = new TokenValidationParameters \n    { \n        ValidateIssuer = true, \n        ValidateAudience = true, \n        ValidateLifetime = true, \n        ValidateIssuerSigningKey = true, \n        ValidIssuer = \""yourdomain.com\"", \n        ValidAudience = \""yourdomain.com\"", \n        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(Configuration[\""Jwt:Key\""])) \n    }; \n});""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Implement role-based authorization in a sample ASP.NET Core project.""
                        }
                    ]
                },
                {
                    ""title"": ""Deploying ASP.NET Core Applications"",
                    ""content"": ""Learn to deploy ASP.NET Core applications to various environments."",
                    ""tutorials"": [
                        {
                            ""title"": ""Deploying to Azure"",
                            ""content"": ""Step-by-step guide on how to deploy your ASP.NET Core application to Microsoft Azure."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""C#"",
                                    ""code"": ""// Example of configuring deployment settings in Azure portal \n""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Deploy a sample ASP.NET Core application to AWS Elastic Beanstalk.""
                        }
                    ]
                }
            ]
        }
    ]
}",2,1,3,5,3,2024-09-15 20:10:14.827,1
27,2,Scala Beginner Course,"{
  ""courseName"": ""Scala Beginner Course"",
  ""duration"": ""3 Months"",
  ""modules"": [
    {
      ""title"": ""Introduction to Scala"",
      ""description"": ""An introduction to the Scala language, its features, and environment setup."",
      ""submodules"": [
        {
          ""title"": ""Scala Overview"",
          ""content"": ""Introduction to Scala, its features, comparison with Java, and where it is used."",
          ""tutorials"": [
            {
              ""title"": ""What is Scala?"",
              ""content"": ""Scala is a general-purpose programming language providing support for functional programming and a strong static type system. Designed to be concise, many of Scala’s design decisions aimed to address criticisms of Java."",
              ""resources"": [
                {
                  ""title"": ""Scala Official Site"",
                  ""link"": ""http://www.scala-lang.org/""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""List down the key features of Scala and compare them with Java.""
            }
          ]
        },
        {
          ""title"": ""Setting Up Development Environment"",
          ""content"": ""Instructions on how to set up Scala on your local machine, including IDE options."",
          ""tutorials"": [
            {
              ""title"": ""Installing Scala"",
              ""content"": ""Step-by-step guide to install Scala on Windows, macOS, and Linux."",
              ""resources"": [
                {
                  ""title"": ""Scala Installation Guide"",
                  ""link"": ""https://docs.scala-lang.org/getting-started/index.html""
                }
              ]
            },
            {
              ""title"": ""Scala IDEs"",
              ""content"": ""Overview of different IDEs that can be used for Scala development like IntelliJ IDEA, VSCode, and Scala IDE for Eclipse."",
              ""resources"": [
                {
                  ""title"": ""IntelliJ IDEA Scala Plugin"",
                  ""link"": ""https://www.jetbrains.com/help/idea/discover-intellij-idea-for-scala.html""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Install Scala and configure your favorite IDE for Scala development.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Scala Basics"",
      ""description"": ""Basic programming concepts in Scala, including syntax, control structures, and data types."",
      ""submodules"": [
        {
          ""title"": ""Scala Syntax and Basic Types"",
          ""content"": ""Introduction to Scala syntax, variables, and basic types."",
          ""tutorials"": [
            {
              ""title"": ""Variables and Basic Types"",
              ""content"": ""Learn about val and var, and basic types like Int, Boolean, String, etc."",
              ""codeSnippets"": [
                {
                  ""language"": ""Scala"",
                  ""code"": ""val x: Int = 10\nvar y: Boolean = false\ny = true""
                }
              ],
              ""resources"": [
                {
                  ""title"": ""Scala Documentation on Basic Types"",
                  ""link"": ""https://docs.scala-lang.org/tour/basics.html""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Declare variables of different types and print their values.""
            }
          ]
        },
        {
          ""title"": ""Control Structures"",
          ""content"": ""Control structures such as if, while, for, and match expressions in Scala."",
          ""tutorials"": [
            {
              ""title"": ""Control Structures in Scala"",
              ""content"": ""Understand if-else, while loops, for-comprehensions, and match expressions."",
              ""codeSnippets"": [
                {
                  ""language"": ""Scala"",
                  ""code"": ""val x = 10\nif (x > 0) println(\""Positive\"") else println(\""Non-positive\"")\n\nfor (i <- 1 to 5) println(i)\n\nval result = x match {\n  case 0 => \""Zero\""\n  case _ => \""Non-zero\""\n}""
                }
              ],
              ""resources"": [
                {
                  ""title"": ""Scala Documentation on Control Structures"",
                  ""link"": ""https://docs.scala-lang.org/tour/control-structures.html""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a Scala program to check if a number is positive, negative, or zero using match expression.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Functional Programming in Scala"",
      ""description"": ""Introduction to functional programming concepts in Scala."",
      ""submodules"": [
        {
          ""title"": ""Functions and Higher-Order Functions"",
          ""content"": ""Understanding functions, higher-order functions, and function literals."",
          ""tutorials"": [
            {
              ""title"": ""Functions in Scala"",
              ""content"": ""Learn how to define and invoke functions, and understand higher-order functions."",
              ""codeSnippets"": [
                {
                  ""language"": ""Scala"",
                  ""code"": ""def add(a: Int, b: Int): Int = a + b\n\nval result = add(1, 2)\n\nval addOne = (x: Int) => x + 1\nval nums = List(1, 2, 3)\nval incrementedNums = nums.map(addOne)""
                }
              ],
              ""resources"": [
                {
                  ""title"": ""Scala Documentation on Functions"",
                  ""link"": ""https://docs.scala-lang.org/tour/basics.html""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a higher-order function that applies a given function to all elements in a list.""
            }
          ]
        },
        {
          ""title"": ""Immutable Collections"",
          ""content"": ""Introduction to immutable collections like List, Set, and Map."",
          ""tutorials"": [
            {
              ""title"": ""Working with Immutable Collections"",
              ""content"": ""Learn about immutable collections and how to work with them."",
              ""codeSnippets"": [
                {
                  ""language"": ""Scala"",
                  ""code"": ""val nums = List(1, 2, 3)\nval names = Set(\""Alice\"", \""Bob\"")\nval ages = Map(\""Alice\"" -> 25, \""Bob\"" -> 30)""
                }
              ],
              ""resources"": [
                {
                  ""title"": ""Scala Documentation on Collections"",
                  ""link"": ""https://docs.scala-lang.org/overviews/collections/overview.html""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create an immutable list and perform various operations like map, filter, and reduce.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Object-Oriented Programming in Scala"",
      ""description"": ""Object-oriented programming concepts and features in Scala."",
      ""submodules"": [
        {
          ""title"": ""Classes and Objects"",
          ""content"": ""Defining classes and objects in Scala."",
          ""tutorials"": [
            {
              ""title"": ""Creating Classes and Objects"",
              ""content"": ""Learn how to define classes, objects, methods, and constructors."",
              ""codeSnippets"": [
                {
                  ""language"": ""Scala"",
                  ""code"": ""class Person(val name: String, val age: Int) {\n  def greet() = println(s\""Hello, my name is $name and I am $age years old.\"")\n}\n\nval alice = new Person(\""Alice\"", 25)\nalice.greet()""
                }
              ],
              ""resources"": [
                {
                  ""title"": ""Scala Documentation on Classes"",
                  ""link"": ""https://docs.scala-lang.org/tour/classes.html""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a class for representing a book with properties like title, author, and pages. Implement a method to display book details.""
            }
          ]
        },
        {
          ""title"": ""Inheritance and Traits"",
          ""content"": ""Understanding inheritance and traits in Scala."",
          ""tutorials"": [
            {
              ""title"": ""Using Inheritance and Traits"",
              ""content"": ""Learn how to extend classes and implement traits."",
              ""codeSnippets"": [
                {
                  ""language"": ""Scala"",
                  ""code"": ""trait Greeter {\n  def greet(): Unit\n}\n\nclass FriendlyPerson(name: String) extends Person(name, 30) with Greeter {\n  override def greet() = println(s\""Hi, I'm $name! Nice to meet you.\"")\n}\n\nval bob = new FriendlyPerson(\""Bob\"")\nbob.greet()""
                }
              ],
              ""resources"": [
                {
                  ""title"": ""Scala Documentation on Traits"",
                  ""link"": ""https://docs.scala-lang.org/tour/traits.html""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a trait called Drivable with a method drive. Implement this trait in a Car class.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Advanced Scala Features"",
      ""description"": ""Exploring advanced features like pattern matching, case classes, and futures."",
      ""submodules"": [
        {
          ""title"": ""Pattern Matching"",
          ""content"": ""Understanding and using pattern matching in Scala."",
          ""tutorials"": [
            {
              ""title"": ""Using Pattern Matching"",
              ""content"": ""Learn how to use pattern matching for different scenarios."",
              ""codeSnippets"": [
                {
                  ""language"": ""Scala"",
                  ""code"": ""val x: Any = 42\nx match {\n  case 1 => println(\""One\"")\n  case i: Int => println(s\""An integer: $i\"")\n  case _ => println(\""Something else\"")\n}""
                }
              ],
              ""resources"": [
                {
                  ""title"": ""Scala Documentation on Pattern Matching"",
                  ""link"": ""https://docs.scala-lang.org/tour/pattern-matching.html""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a Scala program to match against different types and print a message accordingly.""
            }
          ]
        },
        {
          ""title"": ""Case Classes"",
          ""content"": ""Introduction to case classes and their uses."",
          ""tutorials"": [
            {
              ""title"": ""Defining and Using Case Classes"",
              ""content"": ""Learn how to define and use case classes in Scala."",
              ""codeSnippets"": [
                {
                  ""language"": ""Scala"",
                  ""code"": ""case class Point(x: Int, y: Int)\nval point = Point(1, 2)\nprintln(point)""
                }
              ],
              ""resources"": [
                {
                  ""title"": ""Scala Documentation on Case Classes"",
                  ""link"": ""https://docs.scala-lang.org/tour/case-classes.html""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a case class to represent a Person with fields for name and age. Create instances and print their details.""
            }
          ]
        },
        {
          ""title"": ""Futures and Concurrency"",
          ""content"": ""Basics of concurrent programming in Scala using Futures."",
          ""tutorials"": [
            {
              ""title"": ""Working with Futures"",
              ""content"": ""Learn how to use Futures for concurrent programming."",
              ""codeSnippets"": [
                {
                  ""language"": ""Scala"",
                  ""code"": ""import scala.concurrent.Future\nimport scala.concurrent.ExecutionContext.Implicits.global\n\nval futureResult = Future {\n  Thread.sleep(1000)\n  42\n}\n\nfutureResult.map(result => println(s\""Result: $result\""))""
                }
              ],
              ""resources"": [
                {
                  ""title"": ""Scala Documentation on Futures"",
                  ""link"": ""https://docs.scala-lang.org/overviews/core/futures.html""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a Future that simulates a long-running computation and prints the result upon completion.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Final Project"",
      ""description"": ""Apply the concepts learned in the course to a comprehensive final project."",
      ""submodules"": [
        {
          ""title"": ""Project Introduction"",
          ""content"": ""Introduction to the final project and its requirements."",
          ""tutorials"": [
            {
              ""title"": ""Final Project Guidelines"",
              ""content"": ""Outline of the final project requirements, deliverables, and evaluation criteria.""
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Build a simple command-line application in Scala that performs CRUD operations on a collection of data (e.g., books, users, products).""
            }
          ]
        }
      ]
    }
  ]
}",19,1,1,1,3,2024-09-15 20:13:40.033,1
28,2,Python Expert Level Course,"{
  ""courseName"": ""Python Expert Level Course"",
  ""duration"": ""3 Months"",
  ""description"": ""This course is designed for professionals with 2 years of experience in Python who aim to achieve an expert level of proficiency within 3 months."",
  ""modules"": [
    {
      ""title"": ""Advanced Python Techniques"",
      ""description"": ""This module covers advanced Python concepts that are crucial for achieving expertise."",
      ""duration"": ""1 Month"",
      ""submodules"": [
        {
          ""title"": ""Advanced Data Structures"",
          ""content"": ""Learn about advanced data structures like heaps, tries, AVL trees, and graph representations."",
          ""tutorials"": [
            {
              ""title"": ""Heaps and Priority Queues"",
              ""content"": ""Understanding heaps, heapq module, and priority queues."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""import heapq\n\nheap = []\nheapq.heappush(heap, 10)\nheapq.heappush(heap, 20)\nheapq.heappush(heap, 5)\nprint(heapq.heappop(heap))  # Output: 5""
                }
              ]
            },
            {
              ""title"": ""Graph Representations and Algorithms"",
              ""content"": ""Implementing adjacency lists, adjacency matrices, and basic graph algorithms."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""class Graph:\n    def __init__(self):\n        self.graph = {}\n\n    def add_edge(self, u, v):\n        if u not in self.graph:\n            self.graph[u] = []\n        self.graph[u].append(v)\n\ng = Graph()\ng.add_edge(0, 1)\ng.add_edge(0, 2)\nprint(g.graph)  # Output: {0: [1, 2]}""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Implement a min-heap using a list and provide methods for insertion, deletion, and finding the minimum element.""
            },
            {
              ""description"": ""Implement Dijkstra’s algorithm to find the shortest path in a graph.""
            }
          ]
        },
        {
          ""title"": ""Concurrency and Parallelism"",
          ""content"": ""Master threading, multiprocessing, and async programming techniques in Python."",
          ""tutorials"": [
            {
              ""title"": ""Threading in Python"",
              ""content"": ""Using the threading module to create and manage threads."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""import threading\n\ndef print_hello():\n    print(\""Hello\"")\n\nthread = threading.Thread(target=print_hello)\nthread.start()\nthread.join()""
                }
              ]
            },
            {
              ""title"": ""Asynchronous Programming"",
              ""content"": ""Using async/await for asynchronous programming."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""import asyncio\n\nasync def say_hello():\n    await asyncio.sleep(1)\n    print(\""Hello\"")\n\nasyncio.run(say_hello())""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a program that downloads multiple webpages concurrently using threading.""
            },
            {
              ""description"": ""Write an asynchronous web scraper using aiohttp and asyncio.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Python for Data Science and Machine Learning"",
      ""description"": ""Dive deep into data science and machine learning using Python."",
      ""duration"": ""1 Month"",
      ""submodules"": [
        {
          ""title"": ""Data Analysis with Pandas"",
          ""content"": ""Advanced techniques in data manipulation and analysis with Pandas."",
          ""tutorials"": [
            {
              ""title"": ""Advanced Pandas Operations"",
              ""content"": ""Using multi-indexing, groupby operations, and pivot tables."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""import pandas as pd\n\ndata = {\n    'A': ['foo', 'foo', 'foo', 'bar', 'bar', 'bar'],\n    'B': ['one', 'one', 'two', 'two', 'one', 'one'],\n    'C': ['small', 'large', 'small', 'small', 'large', 'small'],\n    'D': [1, 2, 2, 3, 3, 1]\n}\ndf = pd.DataFrame(data)\nprint(df.pivot_table(values='D', index=['A', 'B'], columns=['C'], aggfunc=sum))""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Analyze a complex dataset and generate insights using groupby and pivot tables.""
            }
          ]
        },
        {
          ""title"": ""Machine Learning with Scikit-Learn"",
          ""content"": ""Implementing machine learning algorithms using scikit-learn."",
          ""tutorials"": [
            {
              ""title"": ""Building a Classification Model"",
              ""content"": ""Using scikit-learn to build and evaluate classification models."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""from sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\ndata = load_iris()\nX = data.data\ny = data.target\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\nmodel = RandomForestClassifier()\nmodel.fit(X_train, y_train)\npredictions = model.predict(X_test)\nprint(accuracy_score(y_test, predictions))""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Build a machine learning model to predict house prices using a public dataset.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""System Design and Architecture"",
      ""description"": ""Learn about designing scalable and efficient systems using Python."",
      ""duration"": ""1 Month"",
      ""submodules"": [
        {
          ""title"": ""Design Principles"",
          ""content"": ""Understand SOLID principles, design patterns, and clean architecture."",
          ""tutorials"": [
            {
              ""title"": ""Implementing Design Patterns"",
              ""content"": ""Implement common design patterns like Singleton, Factory, and Observer in Python."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""# Singleton Pattern\nclass Singleton:\n    _instance = None\n\n    def __new__(cls):\n        if cls._instance is None:\n            cls._instance = super(Singleton, cls).__new__(cls)\n        return cls._instance\n\ns1 = Singleton()\ns2 = Singleton()\nprint(s1 is s2)  # Output: True""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Refactor a piece of given code to follow SOLID principles.""
            }
          ]
        },
        {
          ""title"": ""Scalable Architecture"",
          ""content"": ""Learn about microservices, RESTful APIs, and deploying scalable applications."",
          ""tutorials"": [
            {
              ""title"": ""Building REST APIs with Flask"",
              ""content"": ""Create and deploy a RESTful API using Flask."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""from flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('/api', methods=['GET'])\ndef api_all():\n    return jsonify({'message': 'Hello, World!'})\n\nif __name__ == '__main__':\n    app.run(debug=True)""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Build a microservices-based architecture for an e-commerce platform.""
            }
          ]
        }
      ]
    }
  ],
  ""additionalResources"": [
    {
      ""type"": ""Book"",
      ""title"": ""Fluent Python"",
      ""author"": ""Luciano Ramalho"",
      ""link"": ""https://www.oreilly.com/library/view/fluent-python/9781491946237/""
    },
    {
      ""type"": ""Online Course"",
      ""title"": ""Advanced Python Programming"",
      ""platform"": ""Coursera"",
      ""link"": ""https://www.coursera.org/learn/advanced-python""
    },
    {
      ""type"": ""Documentation"",
      ""title"": ""Python Official Documentation"",
      ""link"": ""https://docs.python.org/3/""
    },
    {
      ""type"": ""Cheat Sheet"",
      ""title"": ""Python 3 Cheat Sheet"",
      ""link"": ""https://www.pythoncheatsheet.org/""
    }
  ]
}",3,2,2,4,3,2024-09-15 20:14:43.877,1
29,2,Advanced TypeScript,"{
  ""courseName"": ""Advanced TypeScript"",
  ""duration"": ""2 to 4 Weeks"",
  ""modules"": [
    {
      ""title"": ""Advanced TypeScript Features"",
      ""description"": ""Delve into advanced TypeScript syntax and features."",
      ""submodules"": [
        {
          ""title"": ""Generics"",
          ""content"": ""Learn how to use generics to create reusable and flexible components."",
          ""tutorials"": [
            {
              ""title"": ""Introduction to Generics"",
              ""content"": ""Introduction to the concept of generics and how they solve the problem of reusability."",
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""function identity<T>(arg: T): T { return arg; }""
                }
              ]
            },
            {
              ""title"": ""Generic Functions"",
              ""content"": ""Creating functions that can operate on various data types using generics."",
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""function loggingIdentity<T>(arg: T[]): T[] { console.log(arg.length); return arg; }""
                }
              ]
            },
            {
              ""title"": ""Generic Classes"",
              ""content"": ""Use generics in classes to create classes that can operate on different types."",
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""class GenericNumber<T> { zeroValue: T; add: (x: T, y: T) => T; }""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a generic Stack class that supports push, pop, and peek operations.""
            }
          ]
        },
        {
          ""title"": ""Advanced Types"",
          ""content"": ""Explore more complex types like intersection types, union types, and mapped types."",
          ""tutorials"": [
            {
              ""title"": ""Intersection Types"",
              ""content"": ""Learn how to combine multiple types into one."",
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""type Person = { name: string }; type Employee = Person & { salary: number };""
                }
              ]
            },
            {
              ""title"": ""Union Types"",
              ""content"": ""Understand how to create types that could be one of several types."",
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""function padLeft(value: string, padding: string | number) { /* ... */ }""
                }
              ]
            },
            {
              ""title"": ""Mapped Types"",
              ""content"": ""Explore how to transform one type into another."",
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""type Readonly<T> = { readonly [P in keyof T]: T[P]; };""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a function that accepts either a string or an array and applies an appropriate transformation.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""TypeScript and JavaScript Interoperability"",
      ""description"": ""Focus on integrating TypeScript with JavaScript projects effectively."",
      ""submodules"": [
        {
          ""title"": ""Using Declaration Files"",
          ""content"": ""Learn how to use and create declaration files to tell TypeScript about the types of existing JavaScript code."",
          ""tutorials"": [
            {
              ""title"": ""Basic Declaration Files"",
              ""content"": ""Introduction to declaration files and their syntax."",
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""declare module 'myModule';""
                }
              ]
            },
            {
              ""title"": ""Writing Declaration Files for JavaScript Libraries"",
              ""content"": ""Detailed instructions on how to write declaration files for third-party libraries."",
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""declare function myFunction(param: string): void;""
                }
              ]
            },
            {
              ""title"": ""Using DefinitelyTyped"",
              ""content"": ""Learn how to find and use existing declaration files from the DefinitelyTyped repository."",
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""npm install @types/lodash""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create declaration files for a small JavaScript library.""
            }
          ]
        },
        {
          ""title"": ""Mixing TypeScript and JavaScript"",
          ""content"": ""Techniques for using TypeScript in a JavaScript project and vice versa."",
          ""tutorials"": [
            {
              ""title"": ""Migrating JavaScript to TypeScript"",
              ""content"": ""Step-by-step guide on incrementally migrating a JavaScript project to TypeScript."",
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""// Start by renaming .js files to .ts and fixing errors.""
                }
              ]
            },
            {
              ""title"": ""Hybrid Projects"",
              ""content"": ""Best practices for maintaining a mixed TypeScript and JavaScript codebase."",
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""// Use `allowJs` and `checkJs` in tsconfig.json""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Convert a small JavaScript project to TypeScript by renaming files and fixing type errors.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""TypeScript with Modern Frameworks"",
      ""description"": ""Apply TypeScript in modern frontend and backend frameworks like React, Angular, and Node.js."",
      ""submodules"": [
        {
          ""title"": ""Using TypeScript with React"",
          ""content"": ""Best practices for using TypeScript in React applications."",
          ""tutorials"": [
            {
              ""title"": ""React Components with TypeScript"",
              ""content"": ""Creating strongly-typed functional and class components."",
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""const MyComponent: React.FC<{prop: string}> = ({ prop }) => <div>{prop}</div>;""
                }
              ]
            },
            {
              ""title"": ""Typing React Hooks"",
              ""content"": ""Using TypeScript with custom and built-in React Hooks."",
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""const [state, setState] = useState<string>('initial');""
                }
              ]
            },
            {
              ""title"": ""Context and TypeScript"",
              ""content"": ""Using the React Context API with TypeScript to manage state at the application level."",
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""const MyContext = React.createContext<{ value: string, setValue: (val: string) => void } | undefined>(undefined);""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a React application with TypeScript that uses hooks, context, and typed components.""
            }
          ]
        },
        {
          ""title"": ""Using TypeScript with Angular"",
          ""content"": ""Efficiently using TypeScript in Angular projects."",
          ""tutorials"": [
            {
              ""title"": ""Angular Services with TypeScript"",
              ""content"": ""Create and type Angular services for dependency injection."",
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""export class MyService { getData(): Observable<DataType> { /* ... */ } }""
                }
              ]
            },
            {
              ""title"": ""Angular Components with TypeScript"",
              ""content"": ""Write strongly-typed Angular components."",
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""@Component({ selector: 'app-mycomp', template: '<div>{{prop}}</div>' }) export class MyComponent { prop: string; }""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create an Angular application with modules, components, and services, ensuring all are written with TypeScript.""
            }
          ]
        },
        {
          ""title"": ""Using TypeScript with Node.js"",
          ""content"": ""Integrate TypeScript into backend Node.js applications."",
          ""tutorials"": [
            {
              ""title"": ""Setting Up TypeScript with Node.js"",
              ""content"": ""Initial setup and configuration of a Node.js project with TypeScript."",
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""npm install typescript ts-node @types/node --save-dev""
                }
              ]
            },
            {
              ""title"": ""TypeScript in Express Applications"",
              ""content"": ""Using TypeScript for writing type-safe Express middleware and routes."",
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""const app = express(); app.get('/user', (req: Request, res: Response) => { res.send('User route'); });""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a REST API with Node.js and Express, fully typed with TypeScript.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""TypeScript Best Practices and Patterns"",
      ""description"": ""Adopt best practices and design patterns to write high-quality TypeScript code."",
      ""submodules"": [
        {
          ""title"": ""Clean Code Practices in TypeScript"",
          ""content"": ""Guidelines and examples for writing clean and maintainable TypeScript code."",
          ""tutorials"": [
            {
              ""title"": ""Code Organization"",
              ""content"": ""Structuring your TypeScript project for long-term maintainability."",
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""// Example of a well-structured project layout""
                }
              ]
            },
            {
              ""title"": ""Naming Conventions"",
              ""content"": ""Consistent naming conventions for variables, classes, and functions."",
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""function getUserData() { /* ... */ }""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Refactor a given TypeScript project using the clean code practices discussed.""
            }
          ]
        },
        {
          ""title"": ""Design Patterns in TypeScript"",
          ""content"": ""Implement common design patterns in TypeScript."",
          ""tutorials"": [
            {
              ""title"": ""Singleton Pattern"",
              ""content"": ""Ensure a class has only one instance and provide a global point of access to it."",
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""class Singleton { private static instance: Singleton; private constructor() { } static getInstance() { if (!Singleton.instance) { Singleton.instance = new Singleton(); } return Singleton.instance; } }""
                }
              ]
            },
            {
              ""title"": ""Observer Pattern"",
              ""content"": ""Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified."",
              ""codeSnippets"": [
                {
                  ""language"": ""typescript"",
                  ""code"": ""class Subject { private observers: Observer[] = []; addObserver(observer: Observer) { this.observers.push(observer); } notifyAll() { this.observers.forEach(o => o.update()); } }""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Implement a publish-subscribe system using the Observer pattern in TypeScript.""
            }
          ]
        }
      ]
    }
  ]
}",5,1,2,3,2,2024-09-15 20:19:34.117,1
30,2,Advanced PHP Mastery,"{
  ""courseName"": ""Advanced PHP Mastery"",
  ""duration"": ""3 Months"",
  ""modules"": [
    {
      ""title"": ""Advanced OOP in PHP"",
      ""description"": ""Deep dive into advanced Object-Oriented Programming concepts and techniques in PHP."",
      ""submodules"": [
        {
          ""title"": ""Design Patterns"",
          ""content"": ""Learn and implement common design patterns in PHP to write reusable and maintainable code."",
          ""tutorials"": [
            {
              ""title"": ""Singleton Pattern"",
              ""content"": ""Implementing the Singleton pattern to ensure a class has only one instance."",
              ""codeSnippets"": [
                {
                  ""language"": ""PHP"",
                  ""code"": ""<?php\nclass Singleton {\n    private static $instance;\n    private function __construct() {}\n    public static function getInstance() {\n        if (!self::$instance) {\n            self::$instance = new self();\n        }\n        return self::$instance;\n    }\n}\n?>""
                }
              ]
            },
            {
              ""title"": ""Factory Pattern"",
              ""content"": ""Utilize the Factory pattern to create objects without specifying the exact class of the object that will be created."",
              ""codeSnippets"": [
                {
                  ""language"": ""PHP"",
                  ""code"": ""<?php\ninterface Product {\n    public function getType();\n}\nclass ConcreteProductA implements Product {\n    public function getType() {\n        return 'Type A';\n    }\n}\nclass ConcreteProductB implements Product {\n    public function getType() {\n        return 'Type B';\n    }\n}\nclass Factory {\n    public static function create($type) {\n        if ($type === 'A') return new ConcreteProductA();\n        if ($type === 'B') return new ConcreteProductB();\n        throw new Exception('Unknown type');\n    }\n}\n?>""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Implement the Observer pattern in PHP.""
            },
            {
              ""description"": ""Refactor an existing project to use the Factory pattern.""
            }
          ]
        },
        {
          ""title"": ""Advanced Inheritance and Interfaces"",
          ""content"": ""Understand the complexities of inheritance and effectively use interfaces to design robust systems."",
          ""tutorials"": [
            {
              ""title"": ""Abstract Classes vs Interfaces"",
              ""content"": ""When to use abstract classes and interfaces in PHP for effective OOP."",
              ""codeSnippets"": [
                {
                  ""language"": ""PHP"",
                  ""code"": ""<?php\nabstract class Animal {\n    abstract public function makeSound();\n}\ninterface Soundable {\n    public function makeSound();\n}\nclass Dog extends Animal implements Soundable {\n    public function makeSound() {\n        return 'Woof';\n    }\n}\n?>""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a hierarchy of animal classes using abstract classes and interfaces.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Database Optimization and Advanced Queries"",
      ""description"": ""Master the art of database interaction and optimization for high-performance applications."",
      ""submodules"": [
        {
          ""title"": ""Advanced MySQL"",
          ""content"": ""Learn advanced MySQL concepts such as indexing, query optimization, and advanced joins."",
          ""tutorials"": [
            {
              ""title"": ""Indexing and Query Optimization"",
              ""content"": ""Understand how to use indexes to optimize query performance in MySQL."",
              ""codeSnippets"": [
                {
                  ""language"": ""SQL"",
                  ""code"": ""CREATE INDEX idx_name ON users(name);\nEXPLAIN SELECT * FROM users WHERE name = 'John';""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Analyze and optimize slow queries in an existing database.""
            }
          ]
        },
        {
          ""title"": ""Using PDO for Database Interactions"",
          ""content"": ""Leverage PHP Data Objects (PDO) for secure and efficient database communication."",
          ""tutorials"": [
            {
              ""title"": ""Prepared Statements"",
              ""content"": ""Prevent SQL injection by using prepared statements with PDO."",
              ""codeSnippets"": [
                {
                  ""language"": ""PHP"",
                  ""code"": ""<?php\n$pdo = new PDO('mysql:host=localhost;dbname=test', 'user', 'password');\n$stmt = $pdo->prepare('SELECT * FROM users WHERE name = :name');\n$stmt->execute(['name' => 'John']);\n$rows = $stmt->fetchAll(PDO::FETCH_ASSOC);\n?>""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Convert legacy MySQLi code to use PDO with prepared statements.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""PHP Frameworks and Libraries"",
      ""description"": ""Explore and master popular PHP frameworks and libraries to build extensive and maintainable applications."",
      ""submodules"": [
        {
          ""title"": ""Laravel Framework"",
          ""content"": ""Introduction to Laravel and its advanced features for web application development."",
          ""tutorials"": [
            {
              ""title"": ""Eloquent ORM"",
              ""content"": ""Use Eloquent ORM for database abstraction and interaction."",
              ""codeSnippets"": [
                {
                  ""language"": ""PHP"",
                  ""code"": ""<?php\nuse App\\Models\\User;\n$users = User::where('active', 1)->get();\n?>""
                }
              ]
            },
            {
              ""title"": ""Middleware"",
              ""content"": ""Implement custom middleware for handling HTTP requests."",
              ""codeSnippets"": [
                {
                  ""language"": ""PHP"",
                  ""code"": ""<?php\nclass EnsureTokenIsValid {\n    public function handle($request, Closure $next) {\n        if ($request->token !== 'valid-token') {\n            return redirect('home');\n        }\n        return $next($request);\n    }\n}\n?>""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Build a complete CRUD application using Laravel.""
            },
            {
              ""description"": ""Implement custom middleware for authentication in a Laravel project.""
            }
          ]
        },
        {
          ""title"": ""Symfony Framework"",
          ""content"": ""Dive into Symfony and learn to build robust and scalable applications."",
          ""tutorials"": [
            {
              ""title"": ""Routing and Controllers"",
              ""content"": ""Define routes and create controllers in Symfony."",
              ""codeSnippets"": [
                {
                  ""language"": ""PHP"",
                  ""code"": ""<?php\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\n\nclass DefaultController extends AbstractController {\n    /**\n     * @Route(\""/home\"", name=\""home\"")\n     */\n    public function home() {\n        return $this->render('home.html.twig');\n    }\n}\n?>""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a blog application using Symfony with features like post creation, editing, and deletion.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Scaling and Optimization"",
      ""description"": ""Learn how to scale and optimize PHP applications for performance and high-traffic scenarios."",
      ""submodules"": [
        {
          ""title"": ""Caching Strategies"",
          ""content"": ""Implement effective caching strategies using tools like Memcached and Redis."",
          ""tutorials"": [
            {
              ""title"": ""Memcached Implementation"",
              ""content"": ""Set up and use Memcached for caching in PHP applications."",
              ""codeSnippets"": [
                {
                  ""language"": ""PHP"",
                  ""code"": ""<?php\n$memcached = new Memcached();\n$memcached->addServer('localhost', 11211);\n$memcached->set('key', 'value', 3600);\n$value = $memcached->get('key');\n?>""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Implement Redis caching in a high-traffic PHP application.""
            }
          ]
        },
        {
          ""title"": ""Asynchronous Processing"",
          ""content"": ""Handle asynchronous processing and background tasks with tools like RabbitMQ and queues."",
          ""tutorials"": [
            {
              ""title"": ""Using RabbitMQ"",
              ""content"": ""Set up RabbitMQ and integrate it with PHP for message queuing."",
              ""codeSnippets"": [
                {
                  ""language"": ""PHP"",
                  ""code"": ""<?php\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\n$connection = new AMQPStreamConnection('localhost', 5672, 'user', 'password');\n$channel = $connection->channel();\n$channel->queue_declare('task_queue', false, true, false, false);\n$msg = new AMQPMessage('Hello World!', ['delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT]);\n$channel->basic_publish($msg, '', 'task_queue');\n$channel->close();\n$connection->close();\n?>""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Set up a background task processing system using RabbitMQ in an existing PHP application.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Testing and Quality Assurance"",
      ""description"": ""Ensure application stability and reliability through advanced testing techniques and quality assurance practices."",
      ""submodules"": [
        {
          ""title"": ""Unit Testing with PHPUnit"",
          ""content"": ""Write and execute unit tests in PHP using the PHPUnit testing framework."",
          ""tutorials"": [
            {
              ""title"": ""Basic Unit Testing"",
              ""content"": ""Setup PHPUnit and write basic unit tests."",
              ""codeSnippets"": [
                {
                  ""language"": ""PHP"",
                  ""code"": ""<?php\nuse PHPUnit\\Framework\\TestCase;\nclass SampleTest extends TestCase {\n    public function testAddition() {\n        $this->assertEquals(4, 2+2);\n    }\n}\n?>""
                }
              ]
            },
            {
              ""title"": ""Mocking and Stubbing"",
              ""content"": ""Use mocks and stubs to isolate units of code for testing."",
              ""codeSnippets"": [
                {
                  ""language"": ""PHP"",
                  ""code"": ""<?php\nclass UserService {\n    public function getUser($id) {\n        // Simulate a database call\n        return ['id' => $id, 'name' => 'John Doe'];\n    }\n}\nclass UserServiceTest extends TestCase {\n    public function testGetUser() {\n        $mock = $this->createMock(UserService::class);\n        $mock->method('getUser')->willReturn(['id' => 1, 'name' => 'John Doe']);\n        $this->assertEquals(['id' => 1, 'name' => 'John Doe'], $mock->getUser(1));\n    }\n}\n?>""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write unit tests for a complex class in an existing project.""
            },
            {
              ""description"": ""Implement mocks and stubs in unit tests for database interactions.""
            }
          ]
        },
        {
          ""title"": ""Continuous Integration and Deployment"",
          ""content"": ""Set up Continuous Integration (CI) and Continuous Deployment (CD) pipelines to automate testing and deployment processes."",
          ""tutorials"": [
            {
              ""title"": ""Basic CI/CD Pipeline with GitHub Actions"",
              ""content"": ""Create a simple CI/CD pipeline using GitHub Actions."",
              ""codeSnippets"": [
                {
                  ""language"": ""YAML"",
                  ""code"": ""name: CI\non:\n  push:\n    branches: [ main ]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up PHP\n      uses: shivammathur/setup-php@v2\n      with:\n        php-version: '7.4'\n    - name: Install dependencies\n      run: composer install\n    - name: Run tests\n      run: vendor/bin/phpunit""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Set up a CI/CD pipeline for an existing PHP project using GitHub Actions or another CI/CD tool.""
            }
          ]
        }
      ]
    }
  ]
}",6,2,2,3,3,2024-09-15 20:28:24.467,1
31,2,PHP Advanced Course,"{
  ""courseName"": ""PHP Advanced Course"",
  ""duration"": ""2 to 4 Weeks"",
  ""modules"": [
    {
      ""title"": ""Advanced Object-Oriented Programming (OOP)"",
      ""description"": ""Deep dive into advanced OOP concepts in PHP."",
      ""submodules"": [
        {
          ""title"": ""Design Patterns"",
          ""content"": ""An exploration of design patterns and how they can be implemented in PHP."",
          ""tutorials"": [
            {
              ""title"": ""Understanding and Implementing Singleton Pattern"",
              ""content"": ""Learn how to restrict the instantiation of a class to a single object."",
              ""codeSnippets"": [
                {
                  ""language"": ""PHP"",
                  ""code"": ""<?php\nclass Singleton {\n    private static $instance;\n    private function __construct() {}\n    public static function getInstance() {\n        if (self::$instance === null) self::$instance = new self();\n        return self::$instance;\n    }\n}\n?>""
                }
              ]
            },
            {
              ""title"": ""Factory Pattern Implementation"",
              ""content"": ""Learn how to create objects without exposing the instantiation logic to the client."",
              ""codeSnippets"": [
                {
                  ""language"": ""PHP"",
                  ""code"": ""<?php\ninterface Product {\n    public function getName();\n}\nclass ConcreteProduct implements Product {\n    public function getName() { return 'ConcreteProduct'; }\n}\nclass Factory {\n    public static function createProduct() { return new ConcreteProduct(); }\n}\n$product = Factory::createProduct();\necho $product->getName();\n?>""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Implement the Observer Pattern in PHP.""
            },
            {
              ""description"": ""Use the Strategy Pattern to create a pluggable algorithm in PHP.""
            }
          ]
        },
        {
          ""title"": ""Interfaces and Abstract Classes"",
          ""content"": ""In-depth explanation of interfaces and abstract classes and their usage in PHP."",
          ""tutorials"": [
            {
              ""title"": ""Working with Abstract Classes"",
              ""content"": ""Learn how to define and use abstract classes in PHP."",
              ""codeSnippets"": [
                {
                  ""language"": ""PHP"",
                  ""code"": ""<?php\nabstract class Animal {\n    abstract public function makeSound();\n}\nclass Dog extends Animal {\n    public function makeSound() { echo 'Woof!'; }\n}\n$dog = new Dog();\n$dog->makeSound();\n?>""
                }
              ]
            },
            {
              ""title"": ""Using Interfaces for Flexible Code"",
              ""content"": ""Learn how to define and implement interfaces."",
              ""codeSnippets"": [
                {
                  ""language"": ""PHP"",
                  ""code"": ""<?php\ninterface Logger {\n    public function log($message);\n}\nclass FileLogger implements Logger {\n    public function log($message) { echo 'Logging to a file: ' . $message; }\n}\n$logger = new FileLogger();\n$logger->log('Log message');\n?>""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a class hierarchy with interfaces and abstract classes.""
            },
            {
              ""description"": ""Implement a payment system using interfaces for different payment methods.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Advanced PHP Features"",
      ""description"": ""Covering advanced PHP language features and their applications."",
      ""submodules"": [
        {
          ""title"": ""Namespaces and Autoloading"",
          ""content"": ""Learn how to organize code using namespaces and automatically load class files with autoloaders."",
          ""tutorials"": [
            {
              ""title"": ""Using Namespaces in PHP"",
              ""content"": ""Understand the importance of namespaces and how to declare them."",
              ""codeSnippets"": [
                {
                  ""language"": ""PHP"",
                  ""code"": ""<?php\nnamespace MyApp;\nclass User {\n    // class contents\n}\n?>""
                }
              ]
            },
            {
              ""title"": ""PSR-4 Autoloading Standard"",
              ""content"": ""Implement the PSR-4 autoloading standard in your project."",
              ""codeSnippets"": [
                {
                  ""language"": ""PHP"",
                  ""code"": ""<?php\nspl_autoload_register(function ($class) {\n    $prefix = 'MyApp\\\\';\n    $base_dir = __DIR__ . '/src/';\n    $len = strlen($prefix);\n    if (strncmp($prefix, $class, $len) !== 0) {\n        return;\n    }\n    $relative_class = substr($class, $len);\n    $file = $base_dir . str_replace('\\\\', '/', $relative_class) . '.php';\n    if (file_exists($file)) {\n        require $file;\n    }\n});\n?>""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Refactor a project to use namespaces and autoloading.""
            }
          ]
        },
        {
          ""title"": ""Traits in PHP"",
          ""content"": ""Learn how to use traits to reuse code in PHP classes."",
          ""tutorials"": [
            {
              ""title"": ""Introduction to Traits"",
              ""content"": ""Understand the concept of traits and how to implement them."",
              ""codeSnippets"": [
                {
                  ""language"": ""PHP"",
                  ""code"": ""<?php\ntrait Logger {\n    public function log($message) { echo $message; }\n}\nclass User {\n    use Logger;\n}\n$user = new User();\n$user->log('Hello, world!');\n?>""
                }
              ]
            },
            {
              ""title"": ""Advanced Trait Usage"",
              ""content"": ""Learn about trait conflict resolution and trait composition."",
              ""codeSnippets"": [
                {
                  ""language"": ""PHP"",
                  ""code"": ""<?php\ntrait A {\n    public function hello() { echo 'Hello from A'; }\n}\ntrait B {\n    public function hello() { echo 'Hello from B'; }\n}\nclass MyClass {\n    use A, B {\n        B::hello insteadof A;\n        A::hello as helloA;\n    }\n}\n$obj = new MyClass();\n$obj->hello(); // Outputs: Hello from B\n$obj->helloA(); // Outputs: Hello from A\n?>""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a trait to handle logging in multiple classes.""
            },
            {
              ""description"": ""Resolve conflicts between multiple traits in a class.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Working with Databases"",
      ""description"": ""Advanced techniques in database integration with PHP."",
      ""submodules"": [
        {
          ""title"": ""PDO (PHP Data Objects)"",
          ""content"": ""Learn how to use PDO for database operations."",
          ""tutorials"": [
            {
              ""title"": ""Introduction to PDO"",
              ""content"": ""Understanding PDO and setting up a connection."",
              ""codeSnippets"": [
                {
                  ""language"": ""PHP"",
                  ""code"": ""<?php\n$dsn = 'mysql:host=localhost;dbname=testdb';\n$username = 'root';\n$password = '';\n$options = [];\ntry {\n    $pdo = new PDO($dsn, $username, $password, $options);\n} catch (PDOException $e) {\n    echo 'Connection failed: ' . $e->getMessage();\n}\n?>""
                }
              ]
            },
            {
              ""title"": ""Executing SQL Queries with PDO"",
              ""content"": ""Learn how to execute prepared statements and queries using PDO."",
              ""codeSnippets"": [
                {
                  ""language"": ""PHP"",
                  ""code"": ""<?php\n$sql = 'SELECT * FROM users WHERE id = :id';\n$statement = $pdo->prepare($sql);\n$statement->bindValue(':id', 1);\n$statement->execute();\n$user = $statement->fetch(PDO::FETCH_ASSOC);\nprint_r($user);\n?>""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a CRUD application using PDO.""
            }
          ]
        },
        {
          ""title"": ""Advanced Query Optimization"",
          ""content"": ""Techniques to optimize SQL queries and improve database performance."",
          ""tutorials"": [
            {
              ""title"": ""Using Indexes Effectively"",
              ""content"": ""Learn how to use indexes to speed up queries."",
              ""codeSnippets"": [
                {
                  ""language"": ""SQL"",
                  ""code"": ""CREATE INDEX idx_user_name ON users(name);""
                }
              ]
            },
            {
              ""title"": ""Query Optimization Techniques"",
              ""content"": ""Best practices for writing efficient SQL queries."",
              ""codeSnippets"": []
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Optimize a set of given SQL queries.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""PHP Security"",
      ""description"": ""In-depth guide on securing PHP applications."",
      ""submodules"": [
        {
          ""title"": ""Input Validation and Sanitization"",
          ""content"": ""Techniques to validate and sanitize user input to prevent security vulnerabilities."",
          ""tutorials"": [
            {
              ""title"": ""Implementing Input Validation"",
              ""content"": ""Learn how to validate different types of input in PHP."",
              ""codeSnippets"": [
                {
                  ""language"": ""PHP"",
                  ""code"": ""<?php\n$input = filter_input(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\nif ($input === false) {\n    echo 'Invalid email address';\n} else {\n    echo 'Valid email address';\n}\n?>""
                }
              ]
            },
            {
              ""title"": ""Sanitizing User Input"",
              ""content"": ""Learn how to sanitize inputs to prevent SQL injection and XSS."",
              ""codeSnippets"": [
                {
                  ""language"": ""PHP"",
                  ""code"": ""<?php\n$username = filter_input(INPUT_POST, 'username', FILTER_SANITIZE_STRING);\n$comment = htmlspecialchars($_POST['comment']);\n?>""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a form and apply validation and sanitization techniques.""
            }
          ]
        },
        {
          ""title"": ""Preventing SQL Injection"",
          ""content"": ""Best practices for preventing SQL injection attacks."",
          ""tutorials"": [
            {
              ""title"": ""Using Prepared Statements"",
              ""content"": ""Learn how to use prepared statements to prevent SQL injection."",
              ""codeSnippets"": [
                {
                  ""language"": ""PHP"",
                  ""code"": ""<?php\n$sql = 'SELECT * FROM users WHERE email = :email';\n$statement = $pdo->prepare($sql);\n$statement->bindValue(':email', $email);\n$statement->execute();\n?>""
                }
              ]
            },
            {
              ""title"": ""Escaping User Inputs"",
              ""content"": ""Understand how to escape user inputs before using them in SQL queries."",
              ""codeSnippets"": [
                {
                  ""language"": ""PHP"",
                  ""code"": ""<?php\n$email = $pdo->quote($email);\n$query = \""SELECT * FROM users WHERE email = $email\"";\n?>""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Identify and fix SQL injection vulnerabilities in a sample code.""
            }
          ]
        },
        {
          ""title"": ""Cross-Site Scripting (XSS) Prevention"",
          ""content"": ""Methods to prevent XSS attacks in PHP applications."",
          ""tutorials"": [
            {
              ""title"": ""Output Escaping"",
              ""content"": ""Learn how to escape outputs to prevent XSS."",
              ""codeSnippets"": [
                {
                  ""language"": ""PHP"",
                  ""code"": ""<?php\necho htmlspecialchars($user_input, ENT_QUOTES, 'UTF-8');\n?>""
                }
              ]
            },
            {
              ""title"": ""Content Security Policy (CSP)"",
              ""content"": ""Implement CSP headers to add an additional layer of security."",
              ""codeSnippets"": [
                {
                  ""language"": ""PHP"",
                  ""code"": ""<?php\nheader(\""Content-Security-Policy: default-src 'self'\"");\n?>""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Secure a vulnerable web page from XSS attacks.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Frameworks and Best Practices"",
      ""description"": ""Learn how to work with popular PHP frameworks and best practices for scalable applications."",
      ""submodules"": [
        {
          ""title"": ""Introduction to Laravel"",
          ""content"": ""Overview and setup of the Laravel framework."",
          ""tutorials"": [
            {
              ""title"": ""Setting up Laravel"",
              ""content"": ""Step-by-step guide to install and set up a Laravel project."",
              ""codeSnippets"": [
                {
                  ""language"": ""Shell"",
                  ""code"": ""composer create-project --prefer-dist laravel/laravel blog\nphp artisan serve""
                }
              ]
            },
            {
              ""title"": ""Routing and Controllers"",
              ""content"": ""Learn how to define routes and create controllers in Laravel."",
              ""codeSnippets"": [
                {
                  ""language"": ""PHP"",
                  ""code"": ""<?php\nuse Illuminate\\Support\\Facades\\Route;\nRoute::get('/', [App\\Http\\Controllers\\HomeController::class, 'index']);\n?>""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a Laravel project and implement basic routing.""
            }
          ]
        },
        {
          ""title"": ""Using Symfony Components"",
          ""content"": ""Learn how to integrate Symfony components into your PHP applications."",
          ""tutorials"": [
            {
              ""title"": ""Setting up Symfony"",
              ""content"": ""Guide to install and configure a Symfony project."",
              ""codeSnippets"": [
                {
                  ""language"": ""Shell"",
                  ""code"": ""composer create-project symfony/skeleton my_project_name\ncd my_project_name\nsymfony server:start""
                }
              ]
            },
            {
              ""title"": ""Working with Symfony Console"",
              ""content"": ""Learn how to create and use Symfony Console commands."",
              ""codeSnippets"": [
                {
                  ""language"": ""PHP"",
                  ""code"": ""<?php\nnamespace App\\Command;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nclass HelloWorldCommand extends Command {\n    protected static $defaultName = 'app:hello-world';\n    protected function execute(InputInterface $input, OutputInterface $output): int {\n        $output->writeln('Hello, World!');\n        return Command::SUCCESS;\n    }\n}\n?>""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a Symfony console command to output 'Hello, World!'.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Deployment and Performance Optimization"",
      ""description"": ""Best practices for deploying and optimizing PHP applications."",
      ""submodules"": [
        {
          ""title"": ""Deploying PHP Applications"",
          ""content"": ""Learn how to deploy PHP applications using different methods and tools."",
          ""tutorials"": [
            {
              ""title"": ""Deploying with Docker"",
              ""content"": ""Step-by-step guide to containerize and deploy PHP applications with Docker."",
              ""codeSnippets"": [
                {
                  ""language"": ""Dockerfile"",
                  ""code"": ""FROM php:7.4-apache\nCOPY . /var/www/html/\nEXPOSE 80""
                }
              ]
            },
            {
              ""title"": ""Automating Deployments with GitHub Actions"",
              ""content"": ""Learn how to set up CI/CD pipelines for PHP applications using GitHub Actions."",
              ""codeSnippets"": [
                {
                  ""language"": ""YAML"",
                  ""code"": ""name: PHP CI\non: [push]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '7.4'\n      - name: Install dependencies\n        run: composer install\n""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a Dockerfile for a PHP application and run it locally.""
            },
            {
              ""description"": ""Set up a CI/CD pipeline for a PHP project using GitHub Actions.""
            }
          ]
        },
        {
          ""title"": ""Performance Optimization"",
          ""content"": ""Techniques and best practices for optimizing the performance of PHP applications."",
          ""tutorials"": [
            {
              ""title"": ""Caching Strategies"",
              ""content"": ""Learn about different caching strategies to improve performance."",
              ""codeSnippets"": [
                {
                  ""language"": ""PHP"",
                  ""code"": ""<?php\n// Using OPCache\ndate_default_timezone_set('UTC');\nopcache_compile_file('/path/to/file.php');\n?>""
                }
              ]
            },
            {
              ""title"": ""Profiling PHP Applications"",
              ""content"": ""Use tools like Xdebug and Blackfire to profile and optimize your PHP code."",
              ""codeSnippets"": []
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Implement caching in a PHP application to reduce load times.""
            },
            {
              ""description"": ""Profile a PHP application and identify bottlenecks.""
            }
          ]
        }
      ]
    }
  ],
  ""resources"": [
    {
      ""title"": ""PHP Official Documentation"",
      ""url"": ""https://www.php.net/docs.php""
    },
    {
      ""title"": ""PHP: The Right Way"",
      ""url"": ""https://phptherightway.com/""
    },
    {
      ""title"": ""Laravel Documentation"",
      ""url"": ""https://laravel.com/docs""
    },
    {
      ""title"": ""Symfony Documentation"",
      ""url"": ""https://symfony.com/doc/current/index.html""
    },
    {
      ""title"": ""PHP: The Right Way"",
      ""url"": ""https://phptherightway.com/""
    }
  ]
}",6,1,2,3,2,2024-09-15 20:42:34.900,1
32,2,Beginner Shell Scripting Course,"{
  ""courseName"": ""Beginner Shell Scripting Course"",
  ""duration"": ""2 to 4 Weeks"",
  ""modules"": [
    {
      ""title"": ""Getting Started with Shell Scripting"",
      ""description"": ""Introduction to the basics of shell scripting, including environment setup, script execution, and basic commands."",
      ""submodules"": [
        {
          ""title"": ""Introduction to Shell"",
          ""content"": ""Overview of what shell scripting is, and how it can be used to automate tasks."",
          ""tutorials"": [
            {
              ""title"": ""What is Shell Scripting?"",
              ""content"": ""A tutorial that explains the concept of shell scripting."",
              ""codeSnippets"": [],
              ""resources"": [
                {
                  ""type"": ""article"",
                  ""link"": ""https://en.wikipedia.org/wiki/Shell_script""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Research and list 5 real-world applications of shell scripting.""
            }
          ]
        },
        {
          ""title"": ""Setting Up the Environment"",
          ""content"": ""Guide to setting up the shell scripting environment on various operating systems."",
          ""tutorials"": [
            {
              ""title"": ""Setting Up Shell on Linux"",
              ""content"": ""Step-by-step instructions on how to set up the shell scripting environment on Linux."",
              ""codeSnippets"": [
                {
                  ""language"": ""bash"",
                  ""code"": ""#!/bin/bash\n# This is a comment\n""
                }
              ],
              ""resources"": [
                {
                  ""type"": ""tutorial"",
                  ""link"": ""https://www.shellscript.sh""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Set up a shell scripting environment on your computer.""
            }
          ]
        },
        {
          ""title"": ""Basic Commands"",
          ""content"": ""Introduction to basic shell commands, such as ls, cd, pwd, echo, and more."",
          ""tutorials"": [
            {
              ""title"": ""Basic Shell Commands"",
              ""content"": ""Introduction to the most frequently used basic shell commands."",
              ""codeSnippets"": [
                {
                  ""language"": ""bash"",
                  ""code"": ""echo \""Hello, World!\""\nls -l\ncd /home/user\npwd\n""
                }
              ],
              ""resources"": [
                {
                  ""type"": ""video"",
                  ""link"": ""https://www.youtube.com/watch?v=cQepf9fY6cE""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write and execute a script that uses echo, ls, cd, and pwd commands.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Advanced Shell Scripting Fundamentals"",
      ""description"": ""Diving deeper into shell scripting concepts such as variables, conditionals, loops, and functions."",
      ""submodules"": [
        {
          ""title"": ""Variables and Data Types"",
          ""content"": ""Understanding variables, how to define them, and basic data types in shell scripting."",
          ""tutorials"": [
            {
              ""title"": ""Using Variables in Shell"",
              ""content"": ""How to declare and use variables in shell scripts."",
              ""codeSnippets"": [
                {
                  ""language"": ""bash"",
                  ""code"": ""NAME=\""John Doe\""\necho \""Hello $NAME!\""\n""
                }
              ],
              ""resources"": [
                {
                  ""type"": ""documentation"",
                  ""link"": ""https://www.gnu.org/software/bash/manual/""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a script that defines a variable and prints it to the screen.""
            }
          ]
        },
        {
          ""title"": ""Conditional Statements"",
          ""content"": ""Using if-else statements in shell scripts for decision-making."",
          ""tutorials"": [
            {
              ""title"": ""If-Else in Shell"",
              ""content"": ""Guide on how to use if-else statements in shell scripts."",
              ""codeSnippets"": [
                {
                  ""language"": ""bash"",
                  ""code"": ""if [ \""$1\"" == \""hello\"" ]; then\n  echo \""Hello, World!\""\nelse\n  echo \""Goodbye, World!\""\nfi\n""
                }
              ],
              ""resources"": [
                {
                  ""type"": ""tutorial"",
                  ""link"": ""https://www.shellscript.sh/if-then-else""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a script that takes a parameter and uses an if-else statement to print different messages based on the parameter value.""
            }
          ]
        },
        {
          ""title"": ""Loops"",
          ""content"": ""Introduction to loop constructs like for, while, and until for repeating tasks."",
          ""tutorials"": [
            {
              ""title"": ""Using Loops in Shell"",
              ""content"": ""How to use for, while, and until loops in shell scripts."",
              ""codeSnippets"": [
                {
                  ""language"": ""bash"",
                  ""code"": ""for i in {1..5}; do\n   echo \""Welcome $i times\""\ndone\n""
                }
              ],
              ""resources"": [
                {
                  ""type"": ""video"",
                  ""link"": ""https://www.youtube.com/watch?v=C2QYLkIWZ6A""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a script that uses a loop to print numbers from 1 to 10.""
            }
          ]
        },
        {
          ""title"": ""Functions"",
          ""content"": ""Creating and using functions in shell scripts to encapsulate reusable code."",
          ""tutorials"": [
            {
              ""title"": ""Functions in Shell Scripts"",
              ""content"": ""Understanding how to define and use functions in your shell scripts."",
              ""codeSnippets"": [
                {
                  ""language"": ""bash"",
                  ""code"": ""my_function() {\n   echo \""Hello from my function!\""\n}\n\nmy_function\n""
                }
              ],
              ""resources"": [
                {
                  ""type"": ""article"",
                  ""link"": ""https://tldp.org/LDP/abs/html/abs-guide.html""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a script with a function that takes a parameter and prints a message containing that parameter.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Shell Scripting Best Practices"",
      ""description"": ""Learning best practices for writing clean, efficient, and maintainable shell scripts."",
      ""submodules"": [
        {
          ""title"": ""Commenting and Documentation"",
          ""content"": ""Importance of commenting and documenting your code."",
          ""tutorials"": [
            {
              ""title"": ""Writing Comments in Shell Scripts"",
              ""content"": ""Guide on how to write useful comments in shell scripts."",
              ""codeSnippets"": [
                {
                  ""language"": ""bash"",
                  ""code"": ""# This is a single line comment\n# Another comment explaining the next line of code\necho \""Hello, World!\"" # Inline comment\n""
                }
              ],
              ""resources"": [
                {
                  ""type"": ""tutorial"",
                  ""link"": ""https://www.shellscript.sh/comments""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Take a previously written script and add meaningful comments to explain its functionality.""
            }
          ]
        },
        {
          ""title"": ""Error Handling"",
          ""content"": ""Handling errors and exceptions in shell scripts."",
          ""tutorials"": [
            {
              ""title"": ""Basic Error Handling"",
              ""content"": ""Techniques for adding error handling to your shell scripts."",
              ""codeSnippets"": [
                {
                  ""language"": ""bash"",
                  ""code"": ""if ! mkdir test_dir; then\n   echo \""Failed to create directory\""\n   exit 1\nfi\n""
                }
              ],
              ""resources"": [
                {
                  ""type"": ""article"",
                  ""link"": ""https://www.shellscript.sh/error-handling""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Modify a script to include error handling for potential failures.""
            }
          ]
        },
        {
          ""title"": ""Modular Scripting"",
          ""content"": ""Writing modular scripts for better organization and reusability."",
          ""tutorials"": [
            {
              ""title"": ""Creating Modular Scripts"",
              ""content"": ""How to break down your scripts into smaller, reusable modules."",
              ""codeSnippets"": [
                {
                  ""language"": ""bash"",
                  ""code"": ""source ./helper_functions.sh\n\n# Main script\n""
                }
              ],
              ""resources"": [
                {
                  ""type"": ""tutorial"",
                  ""link"": ""https://www.shellscript.sh/modularity""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Break down a large script into smaller, modular components.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Practical Shell Scripting Projects"",
      ""description"": ""Apply the learned concepts to practical projects that mimic real-world scenarios."",
      ""submodules"": [
        {
          ""title"": ""Automating Backup Tasks"",
          ""content"": ""Creating a script to automate system backups."",
          ""tutorials"": [
            {
              ""title"": ""Automated Backup Script"",
              ""content"": ""Step-by-step guide to create a script that automates backup tasks."",
              ""codeSnippets"": [
                {
                  ""language"": ""bash"",
                  ""code"": ""#!/bin/bash\n# Backup script\n\nSOURCE=\""/home/user/data\""\nTARGET=\""/home/user/backup\""\n\nrsync -av --delete $SOURCE $TARGET\n""
                }
              ],
              ""resources"": [
                {
                  ""type"": ""tutorial"",
                  ""link"": ""https://www.shellscript.sh/backup""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a backup script for your personal files.""
            }
          ]
        },
        {
          ""title"": ""System Monitoring Script"",
          ""content"": ""Developing a script to monitor system performance and resource usage."",
          ""tutorials"": [
            {
              ""title"": ""System Monitoring"",
              ""content"": ""How to create a script that monitors system performance metrics."",
              ""codeSnippets"": [
                {
                  ""language"": ""bash"",
                  ""code"": ""#!/bin/bash\n# System Monitoring Script\n\nwhile true; do\n  date\n  free -h\n  df -h\n  sleep 60\ndone\n""
                }
              ],
              ""resources"": [
                {
                  ""type"": ""video"",
                  ""link"": ""https://www.youtube.com/watch?v=oCc7S0rEkeI""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a script that collects and logs system performance data every minute.""
            }
          ]
        }
      ]
    }
  ]
}",17,1,2,1,2,2024-09-15 20:59:20.867,1
33,2,Python Intermediate Course,"{
  ""courseName"": ""Python Intermediate Course"",
  ""duration"": ""2-4 Weeks"",
  ""modules"": [
    {
      ""title"": ""Advanced Functions and Lambda Expressions"",
      ""description"": ""Deep dive into advanced usage of functions and lambda expressions."",
      ""submodules"": [
        {
          ""title"": ""Lambda Expressions"",
          ""content"": ""Understanding lambda functions, their syntax, and use cases."",
          ""tutorials"": [
            {
              ""title"": ""Introduction to Lambda Expressions"",
              ""content"": ""Learn the basics of lambda expressions and their applications."",
              ""codeSnippets"": [
                {
                  ""language"": ""Python"",
                  ""code"": ""add = lambda x, y: x + y\nprint(add(2, 3))  # Output: 5""
                }
              ]
            },
            {
              ""title"": ""Using Lambda with Map, Filter, and Reduce"",
              ""content"": ""Explore how to use lambda expressions with map, filter, and reduce functions."",
              ""codeSnippets"": [
                {
                  ""language"": ""Python"",
                  ""code"": ""# Using lambda with map\nnumbers = [1, 2, 3, 4]\nsquared = list(map(lambda x: x ** 2, numbers))\nprint(squared)  # Output: [1, 4, 9, 16]\n\n# Using lambda with filter\nevens = list(filter(lambda x: x % 2 == 0, numbers))\nprint(evens)  # Output: [2, 4]\n\n# Using lambda with reduce\nfrom functools import reduce\nproduct = reduce(lambda x, y: x * y, numbers)\nprint(product)  # Output: 24""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a lambda function to sort a list of tuples by the second value.""
            }
          ]
        },
        {
          ""title"": ""Decorators"",
          ""content"": ""Learning how Python decorators work and how to use them."",
          ""tutorials"": [
            {
              ""title"": ""Understanding Decorators"",
              ""content"": ""Learn the structure and usage of decorators in Python."",
              ""codeSnippets"": [
                {
                  ""language"": ""Python"",
                  ""code"": ""def my_decorator(func):\n    def wrapper():\n        print('Something is happening before the function is called.')\n        func()\n        print('Something is happening after the function is called.')\n    return wrapper\n\n@my_decorator\ndef say_hello():\n    print('Hello!')\n\nsay_hello()""
                }
              ]
            },
            {
              ""title"": ""Creating and Applying Decorators"",
              ""content"": ""Dive deeper into creating your own decorators and applying them to functions."",
              ""codeSnippets"": [
                {
                  ""language"": ""Python"",
                  ""code"": ""def repeat(num_times):\n    def decorator_repeat(func):\n        def wrapper(*args, **kwargs):\n            for _ in range(num_times):\n                result = func(*args, **kwargs)\n            return result\n        return wrapper\n    return decorator_repeat\n\n@repeat(num_times=3)\ndef greet(name):\n    print(f'Hello {name}')\n\ngreet('Alice')""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a decorator that prints the execution time of a function.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Object-Oriented Programming (OOP)"",
      ""description"": ""Revisiting OOP concepts and diving deeper into advanced OOP features."",
      ""submodules"": [
        {
          ""title"": ""Classes and Objects"",
          ""content"": ""Advanced techniques for creating and managing classes and objects."",
          ""tutorials"": [
            {
              ""title"": ""Advanced Class Features"",
              ""content"": ""Explore class methods, static methods, and class inheritance."",
              ""codeSnippets"": [
                {
                  ""language"": ""Python"",
                  ""code"": ""class Animal:\n    def __init__(self, name):\n        self.name = name\n\n    def speak(self):\n        raise NotImplementedError('Subclass must implement abstract method')\n\nclass Dog(Animal):\n    def speak(self):\n        return self.name + ' says Woof!'\n\nclass Cat(Animal):\n    def speak(self):\n        return self.name + ' says Meow!'\n\nanimals = [Dog('Fido'), Cat('Whiskers')]\nfor animal in animals:\n    print(animal.speak())""
                }
              ]
            },
            {
              ""title"": ""Special (Magic) Methods"",
              ""content"": ""Learn about Python's special methods (dunder methods) like __str__, __repr__, __len__, and others."",
              ""codeSnippets"": [
                {
                  ""language"": ""Python"",
                  ""code"": ""class Book:\n    def __init__(self, title, author, pages):\n        self.title = title\n        self.author = author\n        self.pages = pages\n\n    def __str__(self):\n        return f'{self.title} by {self.author}'\n\n    def __len__(self):\n        return self.pages\n\nbook = Book('The Catcher in the Rye', 'J.D. Salinger', 277)\n\nprint(book)       # Output: The Catcher in the Rye by J.D. Salinger\nprint(len(book))  # Output: 277""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Implement a class that models a library, with methods to add and remove books, and to search for a book by title.""
            }
          ]
        },
        {
          ""title"": ""Inheritance and Polymorphism"",
          ""content"": ""Understanding and implementing inheritance and polymorphism in Python."",
          ""tutorials"": [
            {
              ""title"": ""Inheritance"",
              ""content"": ""Learn how to inherit from a base class and extend its functionality."",
              ""codeSnippets"": [
                {
                  ""language"": ""Python"",
                  ""code"": ""class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def display_info(self):\n        print(f'Name: {self.name}, Age: {self.age}')\n\nclass Employee(Person):\n    def __init__(self, name, age, employee_id):\n        super().__init__(name, age)\n        self.employee_id = employee_id\n\n    def display_info(self):\n        super().display_info()\n        print(f'Employee ID: {self.employee_id}')\n\nemp = Employee('John Doe', 30, 'E1234')\nemp.display_info()""
                }
              ]
            },
            {
              ""title"": ""Polymorphism"",
              ""content"": ""Understand polymorphism and how it allows methods in different classes to have the same name with different implementations."",
              ""codeSnippets"": [
                {
                  ""language"": ""Python"",
                  ""code"": ""class Bird:\n    def fly(self):\n        print('Birds can fly')\n\nclass Parrot(Bird):\n    def fly(self):\n        print('Parrots can fly')\n\nclass Penguin(Bird):\n    def fly(self):\n        print('Penguins cannot fly')\n\n# common interface\ndef flying_test(bird):\n    bird.fly()\n\nbird = Bird()\nparrot = Parrot()\npenguin = Penguin()\n\nflying_test(bird)\n# Output: Birds can fly\nflying_test(parrot)\n# Output: Parrots can fly\nflying_test(penguin)\n# Output: Penguins cannot fly""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a base class for different types of vehicles and use inheritance to create subclasses for specific vehicle types.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Handling Errors and Exceptions"",
      ""description"": ""Introduction to error handling and creating custom exceptions."",
      ""submodules"": [
        {
          ""title"": ""Exception Handling"",
          ""content"": ""Learn how to handle exceptions using try, except, else, and finally clauses."",
          ""tutorials"": [
            {
              ""title"": ""Basic Exception Handling"",
              ""content"": ""Introduction to exception handling in Python."",
              ""codeSnippets"": [
                {
                  ""language"": ""Python"",
                  ""code"": ""try:\n    x = int(input('Enter a number: '))\n    y = int(input('Enter another number: '))\n    print(x / y)\nexcept ZeroDivisionError:\n    print('Cannot divide by zero!')\nexcept ValueError:\n    print('Invalid input! Please enter a number.')""
                }
              ]
            },
            {
              ""title"": ""Custom Exceptions"",
              ""content"": ""Learn how to define and raise custom exceptions."",
              ""codeSnippets"": [
                {
                  ""language"": ""Python"",
                  ""code"": ""class CustomError(Exception):\n    pass\n\ntry:\n    raise CustomError('This is a custom error')\nexcept CustomError as e:\n    print(e)""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a function that takes a list of integers and returns the reciprocal of each number. Handle the case where the list contains a zero.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Working with Files"",
      ""description"": ""Learn to read from and write to files, handle file exceptions, and use context managers."",
      ""submodules"": [
        {
          ""title"": ""File Operations"",
          ""content"": ""Basic file operations including reading from and writing to files."",
          ""tutorials"": [
            {
              ""title"": ""Reading Files"",
              ""content"": ""Learn how to open and read files in Python."",
              ""codeSnippets"": [
                {
                  ""language"": ""Python"",
                  ""code"": ""with open('example.txt', 'r') as file:\n    content = file.read()\n    print(content)""
                }
              ]
            },
            {
              ""title"": ""Writing to Files"",
              ""content"": ""Learn how to open and write to files in Python."",
              ""codeSnippets"": [
                {
                  ""language"": ""Python"",
                  ""code"": ""with open('example.txt', 'w') as file:\n    file.write('Hello, world!')""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a program that reads a file and counts the number of lines, words, and characters in it.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Working with Libraries and Modules"",
      ""description"": ""Understanding how to use and create Python modules and packages."",
      ""submodules"": [
        {
          ""title"": ""Using Standard Libraries"",
          ""content"": ""Explore some of the most commonly used Python standard libraries."",
          ""tutorials"": [
            {
              ""title"": ""Using the Math Library"",
              ""content"": ""Learn how to use the math library for mathematical operations."",
              ""codeSnippets"": [
                {
                  ""language"": ""Python"",
                  ""code"": ""import math\n\nprint(math.sqrt(16))   # Output: 4.0\nprint(math.factorial(5))  # Output: 120""
                }
              ]
            },
            {
              ""title"": ""Using the OS Library"",
              ""content"": ""Learn how to use the os library to perform operating system related tasks."",
              ""codeSnippets"": [
                {
                  ""language"": ""Python"",
                  ""code"": ""import os\n\n# Get current working directory\nprint(os.getcwd())\n\n# List all files and directories\nprint(os.listdir())""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a script that renames all files in a directory to add a prefix to each file name.""
            }
          ]
        },
        {
          ""title"": ""Creating Modules and Packages"",
          ""content"": ""Learn to create your own Python modules and packages."",
          ""tutorials"": [
            {
              ""title"": ""Creating and Importing Modules"",
              ""content"": ""Step by step guide to creating your own Python modules."",
              ""codeSnippets"": [
                {
                  ""language"": ""Python"",
                  ""code"": ""# create a file named mymodule.py with the following content\n\ndef greeting(name):\n    return f'Hello, {name}!'\n\n# then, to use this module in another script\nimport mymodule\n\nprint(mymodule.greeting('Alice'))  # Output: Hello, Alice!""
                }
              ]
            },
            {
              ""title"": ""Building and Using Packages"",
              ""content"": ""Learn how to organize your modules into packages."",
              ""codeSnippets"": [
                {
                  ""language"": ""Python"",
                  ""code"": ""# create a directory structure like this:\n# mypackage/\n#   __init__.py\n#   module1.py\n#   module2.py\n\n# __init__.py can be empty or initialize the package\n\n# module1.py\n\ndef foo():\n    return 'foo from module1'\n\n# module2.py\n\ndef bar():\n    return 'bar from module2'\n\n# Then you can use the package like this:\nfrom mypackage import module1, module2\n\nprint(module1.foo())  # Output: foo from module1\nprint(module2.bar())  # Output: bar from module2""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a package with at least two modules and write a script to demonstrate importing and using functions from these modules.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Data Analysis with Pandas"",
      ""description"": ""Learn how to use the Pandas library for data manipulation and analysis."",
      ""submodules"": [
        {
          ""title"": ""Introduction to Pandas"",
          ""content"": ""Getting started with the Pandas library for data manipulation."",
          ""tutorials"": [
            {
              ""title"": ""Creating DataFrames"",
              ""content"": ""Learn how to create and manipulate DataFrames."",
              ""codeSnippets"": [
                {
                  ""language"": ""Python"",
                  ""code"": ""import pandas as pd\n\ndata = {\n    'Name': ['Alice', 'Bob', 'Charlie'],\n    'Age': [24, 27, 22],\n    'City': ['New York', 'San Francisco', 'Los Angeles']\n}\n\ndf = pd.DataFrame(data)\nprint(df)""
                }
              ]
            },
            {
              ""title"": ""Data Selection and Filtering"",
              ""content"": ""Learn how to select and filter data in Pandas DataFrames."",
              ""codeSnippets"": [
                {
                  ""language"": ""Python"",
                  ""code"": ""import pandas as pd\n\ndata = {\n    'Name': ['Alice', 'Bob', 'Charlie', 'David'],\n    'Age': [24, 27, 22, 32],\n    'City': ['New York', 'San Francisco', 'Los Angeles', 'Chicago']\n}\n\ndf = pd.DataFrame(data)\n\n# Selecting data\nprint(df['Age'])  # Output: Age column data\nprint(df.loc[0])  # Output: Row data for index 0\n\n# Filtering data\nfiltered_df = df[df['Age'] > 25]\nprint(filtered_df)""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Load a CSV file into a Pandas DataFrame and perform basic data operations such as filtering and summarization.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Version Control with Git"",
      ""description"": ""Introduction to using Git for version control."",
      ""submodules"": [
        {
          ""title"": ""Basic Git Commands"",
          ""content"": ""Learn basic Git commands for initializing a repository, committing changes, and pushing to a remote repository."",
          ""tutorials"": [
            {
              ""title"": ""Getting Started with Git"",
              ""content"": ""Learn how to set up a Git repository and commit changes."",
              ""codeSnippets"": [
                {
                  ""language"": ""bash"",
                  ""code"": ""git init\n git add .\n git commit -m 'Initial commit'""
                }
              ]
            },
            {
              ""title"": ""Collaborating with Git"",
              ""content"": ""Learn how to work with remote repositories, branches, and pull requests."",
              ""codeSnippets"": [
                {
                  ""language"": ""bash"",
                  ""code"": ""git clone <repository_url>\n git checkout -b new-branch\n git push origin new-branch\n # After making some changes\n git add .\n git commit -m 'Feature implementation'\n git push origin new-branch""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Initialize a Git repository, commit some changes, and push them to a remote repository on GitHub.""
            }
          ]
        }
      ]
    }
  ]
}
",3,1,2,2,2,2024-09-15 21:06:21.730,1
34,2,Intermediate Shell Scripting,"{
    ""courseName"": ""Intermediate Shell Scripting"",
    ""modules"": [
        {
            ""title"": ""Advanced Shell Scripting Techniques"",
            ""description"": ""This module covers advanced scripting techniques, including functions, error handling, and script optimization."",
            ""submodules"": [
                {
                    ""title"": ""Functions in Shell"",
                    ""content"": ""Functions allow you to group commands and execute them together. This submodule will cover defining, calling, and managing functions within shell scripts."",
                    ""tutorials"": [
                        {
                            ""title"": ""Defining and Using Functions"",
                            ""content"": ""Learn how to define functions, pass arguments, and return values in shell scripting."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""Shell"",
                                    ""code"": ""function greet() {\n  echo \""Hello, $1!\""\n}\ngreet \""World\""""
                                }
                            ]
                        },
                        {
                            ""title"": ""Function Scope and Lifetime"",
                            ""content"": ""Understand the scope and lifetime of variables within functions."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""Shell"",
                                    ""code"": ""function set_var() {\n  local myvar=\""local variable\""\n  echo $myvar\n}\nset_var\necho $myvar  # This will be empty""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Create a function that takes a filename as an argument and checks if the file exists. If it does, print the size of the file; otherwise, print an error message.""
                        }
                    ]
                },
                {
                    ""title"": ""Error Handling"",
                    ""content"": ""Learn to handle errors in your scripts using exit statuses and trap statements."",
                    ""tutorials"": [
                        {
                            ""title"": ""Using Exit Status"",
                            ""content"": ""Understand how to use exit statuses to determine the success or failure of commands."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""Shell"",
                                    ""code"": ""cp source.txt destination.txt\nif [ $? -eq 0 ]; then\n  echo \""Copy succeeded\""\nelse\n  echo \""Copy failed\""\nfi""
                                }
                            ]
                        },
                        {
                            ""title"": ""Using Trap to Catch Errors"",
                            ""content"": ""Learn to catch errors and execute cleanup commands using the trap statement."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""Shell"",
                                    ""code"": ""trap 'echo \""An error occurred.\""; exit 1' ERR\ncp source.txt destination.txt""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Write a script that creates a temporary file and ensures it is deleted if the script exits unexpectedly.""
                        }
                    ]
                }
            ]
        },
        {
            ""title"": ""Automation with Shell Scripts"",
            ""description"": ""Automate tasks using shell scripts by leveraging loops, scheduling, and conditional statements."",
            ""submodules"": [
                {
                    ""title"": ""Loops and Iterations"",
                    ""content"": ""This submodule covers for, while, and until loops to iterate over data and perform repetitive tasks."",
                    ""tutorials"": [
                        {
                            ""title"": ""Using For Loops"",
                            ""content"": ""Learn to use for loops to iterate over a list of items or range of numbers."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""Shell"",
                                    ""code"": ""for i in 1 2 3 4 5; do\n  echo \""Number: $i\""\ndone""
                                }
                            ]
                        },
                        {
                            ""title"": ""Using While and Until Loops"",
                            ""content"": ""Understand the syntax and use cases for while and until loops."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""Shell"",
                                    ""code"": ""count=1\nwhile [ $count -le 5 ]; do\n  echo \""Count: $count\""\n  count=$((count + 1))\ndone""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Write a script that takes a directory as input and lists all files within it using a for loop.""
                        }
                    ]
                },
                {
                    ""title"": ""Scheduling Tasks"",
                    ""content"": ""Automate script execution with cron jobs to run tasks at specified intervals."",
                    ""tutorials"": [
                        {
                            ""title"": ""Introduction to Cron"",
                            ""content"": ""Learn the basics of setting up and managing cron jobs."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""Shell"",
                                    ""code"": ""* * * * * /path/to/script.sh  # Runs script.sh every minute""
                                }
                            ]
                        },
                        {
                            ""title"": ""Advanced Cron Scheduling"",
                            ""content"": ""Understand how to use special characters and intervals for more complex scheduling."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""Shell"",
                                    ""code"": ""0 0 * * 0 /path/to/backup.sh  # Runs backup.sh every Sunday at midnight""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Schedule a script that backs up a specified directory to run daily at a time of your choosing.""
                        }
                    ]
                }
            ]
        },
        {
            ""title"": ""File and Text Processing"",
            ""description"": ""Master the use of text processing tools like grep, sed, and awk to manipulate and analyze text data."",
            ""submodules"": [
                {
                    ""title"": ""Text Searching with Grep"",
                    ""content"": ""Learn to search through files and directories for specific text patterns using grep."",
                    ""tutorials"": [
                        {
                            ""title"": ""Basic Grep Usage"",
                            ""content"": ""Understand the basic syntax and usage of grep."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""Shell"",
                                    ""code"": ""grep 'pattern' filename""
                                }
                            ]
                        },
                        {
                            ""title"": ""Advanced Grep Options"",
                            ""content"": ""Explore advanced options of grep for more complex searches."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""Shell"",
                                    ""code"": ""grep -r --include='*.txt' 'pattern' /path/to/search""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Write a script that searches for all lines containing a specified word in all text files within a directory.""
                        }
                    ]
                },
                {
                    ""title"": ""Text Conversion with Sed"",
                    ""content"": ""Learn to transform and filter text using the stream editor sed."",
                    ""tutorials"": [
                        {
                            ""title"": ""Basic Sed Usage"",
                            ""content"": ""Understand the basics of how to use sed for simple text replacements."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""Shell"",
                                    ""code"": ""sed 's/oldtext/newtext/g' filename""
                                }
                            ]
                        },
                        {
                            ""title"": ""Advanced Sed Scripts"",
                            ""content"": ""Explore more complex sed operations and scripts."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""Shell"",
                                    ""code"": ""sed -e '/pattern1/ s/oldtext/newtext/g' -e '/pattern2/ d' filename""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Create a sed script that replaces all occurrences of a word in a file with another word and removes lines matching a specific pattern.""
                        }
                    ]
                },
                {
                    ""title"": ""Data Extraction with Awk"",
                    ""content"": ""Manipulate and analyze data within text files using awk."",
                    ""tutorials"": [
                        {
                            ""title"": ""Basic Awk Usage"",
                            ""content"": ""Learn the basics of using awk to extract and process data."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""Shell"",
                                    ""code"": ""awk '{print $1, $3}' filename""
                                }
                            ]
                        },
                        {
                            ""title"": ""Awk in Shell Scripts"",
                            ""content"": ""Integrate awk commands within shell scripts for advanced data processing."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""Shell"",
                                    ""code"": ""awk '/pattern/ {sum += $2} END {print sum}' filename""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Write an awk script that calculates the total size of files listed in a text file.""
                        }
                    ]
                }
            ]
        }
    ],
    ""resources"": [
        {
            ""title"": ""Bash Guide for Beginners"",
            ""url"": ""http://tldp.org/LDP/Bash-Beginners-Guide/html/""
        },
        {
            ""title"": ""Advanced Bash-Scripting Guide"",
            ""url"": ""http://tldp.org/LDP/abs/html/""
        },
        {
            ""title"": ""Linux Shell Scripting Cookbook"",
            ""url"": ""https://www.packtpub.com/product/linux-shell-scripting-cookbook/9781789615413""
        }
    ]
}",17,2,1,2,2,2024-09-15 21:20:43.647,1
35,2,Advanced Scala for Professionals,"{
    ""courseName"": ""Advanced Scala for Professionals"",
    ""duration"": ""1 Week"",
    ""modules"": [
        {
            ""title"": ""Advanced Functional Programming"",
            ""description"": ""Deep dive into advanced functional programming concepts in Scala."",
            ""submodules"": [
                {
                    ""title"": ""Monads and Applicatives"",
                    ""content"": ""Understanding Monads, Applicatives, and their use cases in Scala."",
                    ""tutorials"": [
                        {
                            ""title"": ""Monads in Scala"",
                            ""content"": ""This tutorial covers the concept of monads, their laws, and implementation in Scala."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""scala"",
                                    ""code"": ""trait Monad[M[_]] {\n  def pure[A](value: A): M[A]\n  def flatMap[A, B](instance: M[A])(func: A => M[B]): M[B]\n}\n""
                                }
                            ]
                        },
                        {
                            ""title"": ""Applicatives in Scala"",
                            ""content"": ""Learn about applicatives and how they differ from monads, including some practical examples."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""scala"",
                                    ""code"": ""trait Applicative[F[_]] extends Functor[F] {\n  def pure[A](x: A): F[A]\n  def ap[A, B](ff: F[A => B])(fa: F[A]): F[B]\n}\n""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Create your own Monad instance for a custom data type.""
                        },
                        {
                            ""description"": ""Implement an Applicative for a custom data type and demonstrate its usage.""
                        }
                    ]
                }
            ]
        },
        {
            ""title"": ""Typelevel Programming"",
            ""description"": ""Advanced type-level programming and its applications in Scala."",
            ""submodules"": [
                {
                    ""title"": ""Higher-Kinded Types"",
                    ""content"": ""A comprehensive guide to higher-kinded types and their usage in Scala."",
                    ""tutorials"": [
                        {
                            ""title"": ""Introduction to Higher-Kinded Types"",
                            ""content"": ""Learn the basics of higher-kinded types and how they allow you to abstract over type constructors."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""scala"",
                                    ""code"": ""def map[F[_], A, B](fa: F[A])(f: A => B): F[B] = ???\n""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Implement a function that accepts a higher-kinded type and performs operations on it.""
                        }
                    ]
                },
                {
                    ""title"": ""Type Classes"",
                    ""content"": ""Understanding and creating type classes in Scala for ad-hoc polymorphism."",
                    ""tutorials"": [
                        {
                            ""title"": ""Creating Type Classes"",
                            ""content"": ""Learn how to create and use type classes for different data types in Scala."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""scala"",
                                    ""code"": ""trait Show[A] {\n  def show(a: A): String\n}\n\nimplicit val intShow: Show[Int] = new Show[Int] {\n  def show(a: Int): String = a.toString\n}\n""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Create a type class for a custom data type and provide instances for it.""
                        }
                    ]
                }
            ]
        },
        {
            ""title"": ""Concurrency in Scala"",
            ""description"": ""Advanced topics in concurrent programming with Scala."",
            ""submodules"": [
                {
                    ""title"": ""Akka and Actor Model"",
                    ""content"": ""Learn about the Akka toolkit and how to use the Actor model for concurrent programming."",
                    ""tutorials"": [
                        {
                            ""title"": ""Getting Started with Akka"",
                            ""content"": ""Introduction to Akka and the Actor model, including setup and a simple example."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""scala"",
                                    ""code"": ""import akka.actor.{Actor, ActorSystem, Props}\n\nclass HelloActor extends Actor {\n  def receive = {\n    case \""hello\"" => println(\""hello back at you\"")\n    case _       => println(\""huh?\"")  \n  }\n}\n\nval system = ActorSystem(\""HelloSystem\"")\nval helloActor = system.actorOf(Props[HelloActor], name = \""helloactor\"")\nhelloActor ! \""hello\""\n""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Create a custom actor that interacts with other actors and demonstrates message passing.""
                        }
                    ]
                }
            ]
        },
        {
            ""title"": ""Advanced Scala Libraries"",
            ""description"": ""Exploring some advanced libraries and frameworks used in Scala development."",
            ""submodules"": [
                {
                    ""title"": ""Cats and Cats-Effect"",
                    ""content"": ""Introduction to Cats library for functional programming and Cats-Effect for managing side effects."",
                    ""tutorials"": [
                        {
                            ""title"": ""Using Cats for Functional Programming"",
                            ""content"": ""Learn about the Cats library, including its core concepts and data types."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""scala"",
                                    ""code"": ""import cats._\nimport cats.implicits._\n\nval optionMonad = Monad[Option]\nval result = optionMonad.flatMap(Option(1)) { x => Option(x + 2) }\nprintln(result)\n""
                                }
                            ]
                        },
                        {
                            ""title"": ""Managing Side Effects with Cats-Effect"",
                            ""content"": ""Introduction to Cats-Effect for managing side effects in functional programming."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""scala"",
                                    ""code"": ""import cats.effect.IO\n\nval program = for {\n  _ <- IO(println(\""Hello, World!\""))\n} yield ()\n\nprogram.unsafeRunSync()\n""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Implement a small application using Cats library for functional programming.""
                        },
                        {
                            ""description"": ""Manage side effects in a Scala application using Cats-Effect.""
                        }
                    ]
                },
                {
                    ""title"": ""ZIO"",
                    ""content"": ""Introduction to ZIO for building scalable and robust applications with effectful computations."",
                    ""tutorials"": [
                        {
                            ""title"": ""Getting Started with ZIO"",
                            ""content"": ""Learn about ZIO and its core concepts, including a simple example."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""scala"",
                                    ""code"": ""import zio._\n\nval myApp = for {\n  _ <- console.putStrLn(\""Hello, World!\"")\n} yield ()\n\nRuntime.default.unsafeRun(myApp)\n""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Create an application using ZIO to handle side effects and resource management.""
                        }
                    ]
                }
            ]
        }
    ]
}",19,2,1,0,1,2024-09-15 21:21:42.133,1
36,2,MATLAB Intermediate Level Course,"{
  ""courseName"": ""MATLAB Intermediate Level Course"",
  ""duration"": ""1 Week"",
  ""modules"": [
    {
      ""title"": ""Advanced Array Operations"",
      ""description"": ""Deep dive into advanced manipulations and operations on arrays, including multi-dimensional arrays."",
      ""submodules"": [
        {
          ""title"": ""Multi-Dimensional Arrays"",
          ""content"": ""Learn to create and manipulate multi-dimensional arrays in MATLAB."",
          ""tutorials"": [
            {
              ""title"": ""Creating Multi-Dimensional Arrays"",
              ""content"": ""How to initialize and access data in multi-dimensional arrays."",
              ""codeSnippets"": [
                {
                  ""language"": ""MATLAB"",
                  ""code"": ""A = rand(3, 4, 2);\n% Accessing element at (2,3,1)\nelem = A(2,3,1);""
                }
              ]
            },
            {
              ""title"": ""Operations on Multi-Dimensional Arrays"",
              ""content"": ""Perform operations like slicing, reshaping and more on multi-dimensional arrays."",
              ""codeSnippets"": [
                {
                  ""language"": ""MATLAB"",
                  ""code"": ""B = A(:,:,1) + A(:,:,2);\nreshaped_A = reshape(A, [6,4]);""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a 4x4x2 array of random numbers. Access specific elements and perform basic operations like reshaping and slicing.""
            }
          ]
        },
        {
          ""title"": ""Logical Operations and Indexing"",
          ""content"": ""Learn advanced logical operations and indexing techniques."",
          ""tutorials"": [
            {
              ""title"": ""Logical Indexing"",
              ""content"": ""How to use logical conditions to index arrays."",
              ""codeSnippets"": [
                {
                  ""language"": ""MATLAB"",
                  ""code"": ""A = randi(10, 1, 10);\nindex = A > 5;\nfiltered_A = A(index);""
                }
              ]
            },
            {
              ""title"": ""Advanced Subsetting"",
              ""content"": ""Techniques to subset arrays based on complex conditions."",
              ""codeSnippets"": [
                {
                  ""language"": ""MATLAB"",
                  ""code"": ""B = A(mod(A, 2) == 0);""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create an array of 20 random integers. Extract elements greater than a specific value and those that satisfy multiple conditions.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Data Visualization"",
      ""description"": ""Create advanced plots and visualizations using MATLAB's plotting functions."",
      ""submodules"": [
        {
          ""title"": ""2D Plotting"",
          ""content"": ""Learn to create and customize 2D plots."",
          ""tutorials"": [
            {
              ""title"": ""Basic Plotting"",
              ""content"": ""Step-by-step guide to create basic 2D plots."",
              ""codeSnippets"": [
                {
                  ""language"": ""MATLAB"",
                  ""code"": ""x = 0:0.1:10;\ny = sin(x);\nplot(x, y);""
                }
              ]
            },
            {
              ""title"": ""Customizing Plots"",
              ""content"": ""Custom plot aesthetics such as titles, labels, legends, and annotations."",
              ""codeSnippets"": [
                {
                  ""language"": ""MATLAB"",
                  ""code"": ""plot(x, y, 'r--');\ntitle('Sine Wave');\nxlabel('X-axis');\nylabel('Y-axis');\nlegend('sin(x)');""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Generate a plot of the cosine function and customize it with titles, labels, and line specifications.""
            }
          ]
        },
        {
          ""title"": ""3D Plotting"",
          ""content"": ""Create and enhance 3D plots."",
          ""tutorials"": [
            {
              ""title"": ""Surface Plots"",
              ""content"": ""How to generate and customize surface plots."",
              ""codeSnippets"": [
                {
                  ""language"": ""MATLAB"",
                  ""code"": ""[X,Y] = meshgrid(-5:0.5:5, -5:0.5:5);\nZ = sin(sqrt(X.^2 + Y.^2));\nsurf(X, Y, Z);""
                }
              ]
            },
            {
              ""title"": ""Mesh and Contour Plots"",
              ""content"": ""Create and customize mesh and contour plots."",
              ""codeSnippets"": [
                {
                  ""language"": ""MATLAB"",
                  ""code"": ""mesh(X, Y, Z);\ncontour(X, Y, Z);""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a 3D surface plot of a mathematical function and add customization features.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Advanced File I/O"",
      ""description"": ""Read from and write to various file formats, including text, CSV, and Excel files."",
      ""submodules"": [
        {
          ""title"": ""Reading/Writing Text Files"",
          ""content"": ""Handle operations related to reading from and writing to text files."",
          ""tutorials"": [
            {
              ""title"": ""Text File Operations"",
              ""content"": ""Basic read and write operations on text files."",
              ""codeSnippets"": [
                {
                  ""language"": ""MATLAB"",
                  ""code"": ""fid = fopen('myfile.txt', 'r');\ncontent = fread(fid);\nfclose(fid);\n\nfid = fopen('myoutput.txt', 'w');\nfwrite(fid, content);\nfclose(fid);""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a script that reads a text file, processes the content, and writes the processed content to a new text file.""
            }
          ]
        },
        {
          ""title"": ""Handling CSV/Excel Files"",
          ""content"": ""Read from and write to CSV and Excel files."",
          ""tutorials"": [
            {
              ""title"": ""CSV File Operations"",
              ""content"": ""Steps to read from and write to CSV files."",
              ""codeSnippets"": [
                {
                  ""language"": ""MATLAB"",
                  ""code"": ""data = readtable('data.csv');\nwrite.table(data, 'output.csv');""
                }
              ]
            },
            {
              ""title"": ""Excel File Operations"",
              ""content"": ""Read from and write to Excel files using MATLAB."",
              ""codeSnippets"": [
                {
                  ""language"": ""MATLAB"",
                  ""code"": ""data = readtable('data.xlsx');\nwrite.table(data, 'output.xlsx');""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a script to read data from a CSV file, perform basic data manipulation, and write the modified data to a new CSV file.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Function Handles and Anonymous Functions"",
      ""description"": ""Create and use function handles and anonymous functions for more flexible coding."",
      ""submodules"": [
        {
          ""title"": ""Function Handles"",
          ""content"": ""Learn to create and use function handles for existing MATLAB functions as well as custom functions."",
          ""tutorials"": [
            {
              ""title"": ""Creating Function Handles"",
              ""content"": ""Steps to create handles for built-in and custom functions."",
              ""codeSnippets"": [
                {
                  ""language"": ""MATLAB"",
                  ""code"": ""f = @sin;\nresult = f(pi/2);\n\nmyFunction = @(x) x^2 + 2*x + 1;\nresult2 = myFunction(3);""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a function handle for a quadratic equation and use it to compute values for different inputs.""
            }
          ]
        },
        {
          ""title"": ""Anonymous Functions"",
          ""content"": ""Define and use anonymous functions for simple tasks."",
          ""tutorials"": [
            {
              ""title"": ""Defining Anonymous Functions"",
              ""content"": ""Learn to define simple anonymous functions."",
              ""codeSnippets"": [
                {
                  ""language"": ""MATLAB"",
                  ""code"": ""squareFunc = @(x) x^2;\nresult = squareFunc(5);\n\nsumFunc = @(a, b) a + b;\nresult2 = sumFunc(3, 4);""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create anonymous functions for basic arithmetic operations and use them with different inputs.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Object-Oriented Programming in MATLAB"",
      ""description"": ""Understand the principles of object-oriented programming (OOP) in MATLAB and learn to create custom classes and objects."",
      ""submodules"": [
        {
          ""title"": ""Basic OOP Concepts"",
          ""content"": ""Introduction to classes, objects, properties, and methods in MATLAB."",
          ""tutorials"": [
            {
              ""title"": ""Defining Classes and Properties"",
              ""content"": ""How to define a new class with properties and methods."",
              ""codeSnippets"": [
                {
                  ""language"": ""MATLAB"",
                  ""code"": ""classdef MyClass\n    properties\n        Prop1\n        Prop2\n    end\n    methods\n        function obj = MyClass(val1, val2)\n            obj.Prop1 = val1;\n            obj.Prop2 = val2;\n        end\n    end\nend""
                }
              ]
            },
            {
              ""title"": ""Creating Objects"",
              ""content"": ""Steps to create objects from user-defined classes."",
              ""codeSnippets"": [
                {
                  ""language"": ""MATLAB"",
                  ""code"": ""obj = MyClass(10, 20);\nvalue1 = obj.Prop1;\nvalue2 = obj.Prop2;""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Define a class with at least two properties and one method. Create an object from the class and access its properties and methods.""
            }
          ]
        },
        {
          ""title"": ""Advanced OOP Techniques"",
          ""content"": ""Learn inheritance, encapsulation, and polymorphism in MATLAB."",
          ""tutorials"": [
            {
              ""title"": ""Class Inheritance"",
              ""content"": ""How to create subclasses that inherit properties and methods from a superclass."",
              ""codeSnippets"": [
                {
                  ""language"": ""MATLAB"",
                  ""code"": ""classdef SubClass < MyClass\n    methods\n        function obj = SubClass(val1, val2)\n            obj@MyClass(val1, val2);\n        end\n    end\nend""
                }
              ]
            },
            {
              ""title"": ""Encapsulation and Access Control"",
              ""content"": ""Techniques to control access to properties and methods."",
              ""codeSnippets"": [
                {
                  ""language"": ""MATLAB"",
                  ""code"": ""classdef EncapsulatedClass\n    properties (Access = private)\n        PrivateProp\n    end\n    methods\n        function obj = EncapsulatedClass(val)\n            obj.PrivateProp = val;\n        end\n        function val = getProp(obj)\n            val = obj.PrivateProp;\n        end\n    end\nend""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a subclass from an existing class and demonstrate inheritance. Implement private properties and methods to show encapsulation.""
            }
          ]
        }
      ]
    }
  ]
}",18,1,1,2,1,2024-09-15 21:22:28.823,1
37,2,Intermediate Scala Programming,"{
  ""courseName"": ""Intermediate Scala Programming"",
  ""duration"": ""2 to 4 Weeks"",
  ""modules"": [
    {
      ""title"": ""Functional Programming in Scala"",
      ""description"": ""Delve deeper into functional programming concepts and see how Scala leverages FP paradigms."",
      ""submodules"": [
        {
          ""title"": ""Higher-Order Functions"",
          ""content"": ""Understand and implement higher-order functions, which are functions that take other functions as parameters or return functions as results."",
          ""tutorials"": [
            {
              ""title"": ""Introduction to Higher-Order Functions"",
              ""content"": ""Learn the basics of higher-order functions and how they are used in Scala."",
              ""codeSnippets"": [
                {
                  ""language"": ""scala"",
                  ""code"": ""def applyTwice(f: Int => Int, x: Int): Int = f(f(x))\nval result = applyTwice(_ + 2, 5) // result = 9""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a higher-order function that composes two functions f and g.""
            }
          ]
        },
        {
          ""title"": ""Currying and Partially Applied Functions"",
          ""content"": ""Explore currying, a technique of transforming a function with multiple arguments into a sequence of functions, each with a single argument."",
          ""tutorials"": [
            {
              ""title"": ""Currying in Scala"",
              ""content"": ""Understand the concept of currying and how to implement it in Scala."",
              ""codeSnippets"": [
                {
                  ""language"": ""scala"",
                  ""code"": ""def add(a: Int)(b: Int): Int = a + b\nval add5 = add(5) _\nval result = add5(10) // result = 15""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a curried function that concatenates three strings.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Advanced Type System"",
      ""description"": ""Learn about Scala's sophisticated type system, including type variance and type classes."",
      ""submodules"": [
        {
          ""title"": ""Type Parameterization"",
          ""content"": ""Understand how to create generic classes and methods in Scala."",
          ""tutorials"": [
            {
              ""title"": ""Generic Types and Methods"",
              ""content"": ""Learn to define and use generic types and methods in Scala."",
              ""codeSnippets"": [
                {
                  ""language"": ""scala"",
                  ""code"": ""class Stack[A] {\n  private var elements: List[A] = Nil\n  def push(x: A): Unit = elements = x :: elements\n  def pop(): A = {\n    val result = elements.head\n    elements = elements.tail\n    result\n  }\n}""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Implement a generic Queue class in Scala.""
            }
          ]
        },
        {
          ""title"": ""Type Bounds"",
          ""content"": ""Learn about upper and lower type bounds, which constrain the types that can be used as parameters."",
          ""tutorials"": [
            {
              ""title"": ""Upper and Lower Type Bounds"",
              ""content"": ""Understand how to use type bounds to restrict type parameters."",
              ""codeSnippets"": [
                {
                  ""language"": ""scala"",
                  ""code"": ""def maxList[T <: Ordered[T]](elements: List[T]): T =\n  elements.reduceLeft((x, y) => if (x > y) x else y)""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a function that accepts a list of elements with a lower type bound.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Concurrency and Parallelism"",
      ""description"": ""Explore Scala's concurrency model and libraries for writing concurrent and parallel applications."",
      ""submodules"": [
        {
          ""title"": ""Futures and Promises"",
          ""content"": ""Learn to use Futures and Promises for asynchronous programming."",
          ""tutorials"": [
            {
              ""title"": ""Working with Futures"",
              ""content"": ""Understand Futures in Scala and how to perform asynchronous computations."",
              ""codeSnippets"": [
                {
                  ""language"": ""scala"",
                  ""code"": ""import scala.concurrent.{Future, Await}\nimport scala.concurrent.ExecutionContext.Implicits.global\nimport scala.concurrent.duration._\n\nval future = Future { 1 + 1 }\nval result = Await.result(future, 1.second) // result = 2""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a future that fetches data from a remote server and process it asynchronously.""
            }
          ]
        },
        {
          ""title"": ""Actors"",
          ""content"": ""Understand the Actor model and how to use Akka for building concurrent systems."",
          ""tutorials"": [
            {
              ""title"": ""Introduction to Akka Actors"",
              ""content"": ""Learn the basics of Akka actors and how to create and interact with them."",
              ""codeSnippets"": [
                {
                  ""language"": ""scala"",
                  ""code"": ""import akka.actor.{Actor, ActorSystem, Props}\n\nclass Printer extends Actor {\n  def receive = {\n    case msg: String => println(msg)\n  }\n}\n\nval system = ActorSystem(\""MyActorSystem\"")\nval printer = system.actorOf(Props[Printer], name = \""printer\"")\nprinter ! \""Hello, Akka!\""""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Implement a simple actor system for a chat application.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Collections and Data Structures"",
      ""description"": ""Gain a deeper understanding of Scala's rich collections library and data structures."",
      ""submodules"": [
        {
          ""title"": ""Immutable Collections"",
          ""content"": ""Explore the immutable collections in the Scala standard library."",
          ""tutorials"": [
            {
              ""title"": ""Using Immutable Collections"",
              ""content"": ""Understand how to use and manipulate immutable collections such as List, Set, and Map."",
              ""codeSnippets"": [
                {
                  ""language"": ""scala"",
                  ""code"": ""val immutableList = List(1, 2, 3)\nval newList = immutableList :+ 4 // newList = List(1, 2, 3, 4)""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a function that reverses an immutable list.""
            }
          ]
        },
        {
          ""title"": ""Mutable Collections"",
          ""content"": ""Learn when and how to use mutable collections in Scala."",
          ""tutorials"": [
            {
              ""title"": ""Working with Mutable Collections"",
              ""content"": ""Understand the trade-offs of using mutable collections and see some common use cases."",
              ""codeSnippets"": [
                {
                  ""language"": ""scala"",
                  ""code"": ""val mutableSet = scala.collection.mutable.Set(1, 2, 3)\nmutableSet += 4 // mutableSet = Set(1, 2, 3, 4)""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Implement a mutable stack data structure.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Error Handling and Testing"",
      ""description"": ""Learn best practices for error handling and testing in Scala applications."",
      ""submodules"": [
        {
          ""title"": ""Error Handling with Try"",
          ""content"": ""Use the Try class to handle exceptions in a functional way."",
          ""tutorials"": [
            {
              ""title"": ""Understanding Try"",
              ""content"": ""Understand how to use Try to deal with exceptions gracefully."",
              ""codeSnippets"": [
                {
                  ""language"": ""scala"",
                  ""code"": ""import scala.util.{Try, Success, Failure}\n\nval result = Try(1 / 0) match {\n  case Success(value) => s\""Success: $value\""\n  case Failure(exception) => s\""Failure: ${exception.getMessage}\""\n}""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a function that reads a file and returns its contents wrapped in a Try.""
            }
          ]
        },
        {
          ""title"": ""Testing with ScalaTest"",
          ""content"": ""Learn to write and run tests using the ScalaTest framework."",
          ""tutorials"": [
            {
              ""title"": ""Getting Started with ScalaTest"",
              ""content"": ""Understand the basics of writing tests using ScalaTest."",
              ""codeSnippets"": [
                {
                  ""language"": ""scala"",
                  ""code"": ""import org.scalatest.flatspec.AnyFlatSpec\n\nclass ExampleSpec extends AnyFlatSpec {\n  \""An empty list\"" should \""have size 0\"" in {\n    assert(List.empty.size == 0)\n  }\n}""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write unit tests for a simple calculator class.""
            }
          ]
        }
      ]
    }
  ],
  ""resources"": [
    {
      ""title"": ""Scala Documentation"",
      ""link"": ""https://docs.scala-lang.org/""
    },
    {
      ""title"": ""Books"",
      ""recommendations"": [
        ""Programming in Scala by Martin Odersky, Lex Spoon, and Bill Venners"",
        ""Scala Cookbook by Alvin Alexander""
      ]
    },
    {
      ""title"": ""Online Courses"",
      ""link"": [
        ""https://www.coursera.org/learn/scala-functional-programming"",
        ""https://www.udemy.com/course/advanced-scala/""
      ]
    }
  ]
}",19,1,2,2,2,2024-09-15 21:22:41.307,1
38,1,Intermediate SQL Mastery,"{
    ""courseName"": ""Intermediate SQL Mastery"",
    ""duration"": ""3 Months"",
    ""modules"": [
        {
            ""title"": ""Advanced SQL Queries"",
            ""description"": ""Learn to write complex SQL queries that involve multiple tables and subqueries."",
            ""submodules"": [
                {
                    ""title"": ""Joining Tables"",
                    ""content"": ""Understand different types of joins including INNER JOIN, LEFT JOIN, RIGHT JOIN, FULL JOIN, CROSS JOIN."",
                    ""tutorials"": [
                        {
                            ""title"": ""Introduction to SQL Joins"",
                            ""content"": ""Learn the concept of joining tables including syntactical details and use cases."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""SQL"",
                                    ""code"": ""SELECT employees.name, departments.name FROM employees INNER JOIN departments ON employees.dept_id = departments.dept_id;""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Write a query to find all employees and their respective department names using INNER JOIN.""
                        },
                        {
                            ""description"": ""Modify the previous query to include employees who do not belong to any department using LEFT JOIN.""
                        }
                    ]
                },
                {
                    ""title"": ""Subqueries"",
                    ""content"": ""Learn to use subqueries in SELECT, FROM, WHERE, and HAVING clauses."",
                    ""tutorials"": [
                        {
                            ""title"": ""Using Subqueries in SELECT Clause"",
                            ""content"": ""Learn how to embed a subquery within the SELECT clause to calculate derived columns."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""SQL"",
                                    ""code"": ""SELECT name, (SELECT AVG(salary) FROM employees) AS avg_salary FROM employees;""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Write a query to list employees whose salaries are above the average salary using a subquery.""
                        }
                    ]
                }
            ]
        },
        {
            ""title"": ""Database Functions and Procedures"",
            ""description"": ""Master the use of SQL built-in functions and learn to create stored procedures."",
            ""submodules"": [
                {
                    ""title"": ""Built-in Functions"",
                    ""content"": ""Explore various built-in SQL functions including aggregate functions, string functions, and date functions."",
                    ""tutorials"": [
                        {
                            ""title"": ""Working with Aggregate Functions"",
                            ""content"": ""Learn to use aggregate functions like COUNT, SUM, AVG, MIN, and MAX."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""SQL"",
                                    ""code"": ""SELECT department, COUNT(*) AS num_employees, AVG(salary) AS avg_salary FROM employees GROUP BY department;""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Write queries using COUNT, SUM, AVG to provide various statistics from a sample sales database.""
                        }
                    ]
                },
                {
                    ""title"": ""Stored Procedures"",
                    ""content"": ""Learn to create and use stored procedures for better SQL query management and reusability."",
                    ""tutorials"": [
                        {
                            ""title"": ""Creating a Simple Stored Procedure"",
                            ""content"": ""Learn the syntax to create stored procedures and how to execute them."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""SQL"",
                                    ""code"": ""CREATE PROCEDURE GetEmployeeCount AS BEGIN SELECT COUNT(*) FROM employees; END;""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Create a stored procedure to calculate total sales for a given month and year.""
                        }
                    ]
                }
            ]
        },
        {
            ""title"": ""Performance Tuning and Optimization"",
            ""description"": ""Learn techniques to optimize SQL queries and improve performance."",
            ""submodules"": [
                {
                    ""title"": ""Indexing"",
                    ""content"": ""Understand how indexing can drastically improve query performance and learn best practices."",
                    ""tutorials"": [
                        {
                            ""title"": ""Introduction to Indexing"",
                            ""content"": ""Learn what indexes are, why they are important, and how to create them."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""SQL"",
                                    ""code"": ""CREATE INDEX idx_employee_dept ON employees(dept_id);""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Create indexes on a sample table and observe the performance improvements in query execution.""
                        }
                    ]
                },
                {
                    ""title"": ""Query Optimization"",
                    ""content"": ""Learn various techniques to optimize your SQL queries, including the use of query execution plans."",
                    ""tutorials"": [
                        {
                            ""title"": ""Analyzing Query Execution Plans"",
                            ""content"": ""Learn how to read and interpret query execution plans to identify bottlenecks."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""SQL"",
                                    ""code"": ""EXPLAIN SELECT * FROM employees WHERE name = 'John Doe';""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Perform an analysis on slow queries using execution plans and suggest improvements.""
                        }
                    ]
                }
            ]
        }
   ]
}",12,1,2,2,3,2024-09-28 08:42:52.077,2
39,1,Mastering C#,"{
  ""courseName"": ""Mastering C#"",
  ""duration"": ""3 Months"",
  ""modules"": [
    {
      ""title"": ""Introduction to C#"",
      ""description"": ""Understand the basics of C# programming language and .NET framework."",
      ""submodules"": [
        {
          ""title"": ""Getting Started with C#"",
          ""content"": ""Learn about the history of C#, setting up the development environment, and writing your first C# program."",
          ""tutorials"": [
            {
              ""title"": ""Introduction to C# and .NET"",
              ""content"": ""Overview of C# and the .NET framework, including their history and key features."",
              ""codeSnippets"": [
                {
                  ""language"": ""C#"",
                  ""code"": ""Console.WriteLine(\""Hello, World!\"");""
                }
              ]
            },
            {
              ""title"": ""Setting Up Your Environment"",
              ""content"": ""Guide on installing Visual Studio and setting up a new C# project.""
            },
            {
              ""title"": ""Writing Your First C# Program"",
              ""content"": ""Step-by-step tutorial on writing and running your first C# program."",
              ""codeSnippets"": [
                {
                  ""language"": ""C#"",
                  ""code"": ""using System;\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(\""Hello, World!\"");\n    }\n}""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a simple program that outputs your name to the console.""
            }
          ]
        },
        {
          ""title"": ""Basic Syntax and Program Structure"",
          ""content"": ""Understand the basic syntax of C# and how to structure a simple program."",
          ""tutorials"": [
            {
              ""title"": ""Variables and Data Types"",
              ""content"": ""Learn about different data types in C# and how to use variables."",
              ""codeSnippets"": [
                {
                  ""language"": ""C#"",
                  ""code"": ""int age = 30;\nstring name = \""John\"";\nbool isStudent = true;""
                }
              ]
            },
            {
              ""title"": ""Operators and Expressions"",
              ""content"": ""Learn about different operators in C# and how to use them in expressions."",
              ""codeSnippets"": [
                {
                  ""language"": ""C#"",
                  ""code"": ""int sum = 5 + 10;\nint product = 5 * 10;\nbool isEqual = (5 == 10);""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a program that performs basic arithmetic operations and displays the results.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Object-Oriented Programming"",
      ""description"": ""Dive into the principles of Object-Oriented Programming (OOP) and how they are implemented in C#."",
      ""submodules"": [
        {
          ""title"": ""Classes and Objects"",
          ""content"": ""Learn about defining classes, creating objects, and using methods."",
          ""tutorials"": [
            {
              ""title"": ""Defining Classes and Creating Objects"",
              ""content"": ""Learn how to define your own classes and create objects of those classes."",
              ""codeSnippets"": [
                {
                  ""language"": ""C#"",
                  ""code"": ""class Car\n{\n    public string color;\n    public void Drive() {\n        Console.WriteLine(\""Driving the car\"");\n    }\n}\n\nCar myCar = new Car();\nmyCar.color = \""red\"";\nmyCar.Drive();""
                }
              ]
            },
            {
              ""title"": ""Properties and Methods"",
              ""content"": ""Learn about adding properties and methods to your classes."",
              ""codeSnippets"": [
                {
                  ""language"": ""C#"",
                  ""code"": ""class Car\n{\n    public string Color { get; set; }\n    public void Drive() {\n        Console.WriteLine(\""Driving the \"" + Color + \"" car.\"");\n    }\n}\n\nCar myCar = new Car();\nmyCar.Color = \""red\"";\nmyCar.Drive();""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a class for a Book with properties for Title, Author, and Pages. Include a method to display the book details.""
            }
          ]
        },
        {
          ""title"": ""Inheritance"",
          ""content"": ""Understand the concept of inheritance and how to create a derived class."",
          ""tutorials"": [
            {
              ""title"": ""Introduction to Inheritance"",
              ""content"": ""Learn the basics of inheritance and how to extend functionality of base classes."",
              ""codeSnippets"": [
                {
                  ""language"": ""C#"",
                  ""code"": ""class Vehicle\n{\n    public int Speed { get; set; }\n    public void Go() {\n        Console.WriteLine(\""Moving...\"");\n    }\n}\n\nclass Car : Vehicle\n{\n    public void Honk() {\n        Console.WriteLine(\""Honking...\"");\n    }\n}\n\nCar sedan = new Car();\nsedan.Speed = 60;\nsedan.Go();\nsedan.Honk();""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a class for a Bicycle that inherits from a Vehicle base class. Add a method unique to Bicycle and demonstrate its usage.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Advanced C# Concepts"",
      ""description"": ""Explore advanced features and concepts in C# to enhance your programming capabilities."",
      ""submodules"": [
        {
          ""title"": ""LINQ and Lambda Expressions"",
          ""content"": ""Learn about Language Integrated Query (LINQ) and lambda expressions for powerful data manipulation."",
          ""tutorials"": [
            {
              ""title"": ""Introduction to LINQ"",
              ""content"": ""Learn the basics of LINQ and how to perform queries on collections."",
              ""codeSnippets"": [
                {
                  ""language"": ""C#"",
                  ""code"": ""int[] numbers = { 5, 10, 8, 3, 6, 12, 25, 7, 4, 1, 9, 0 };\nvar filtered = numbers.Where(n => n > 5);\nforeach (var num in filtered)\n{\n    Console.WriteLine(num);\n}""
                }
              ]
            },
            {
              ""title"": ""Using Lambda Expressions"",
              ""content"": ""Learn how to use lambda expressions to write concise and readable code."",
              ""codeSnippets"": [
                {
                  ""language"": ""C#"",
                  ""code"": ""Func<int, int, int> add = (a, b) => a + b;\nConsole.WriteLine(add(2, 3));""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a LINQ query to filter and display even numbers from a list of integers.""
            }
          ]
        },
        {
          ""title"": ""Asynchronous Programming"",
          ""content"": ""Understand asynchronous programming and how to write non-blocking code using async and await."",
          ""tutorials"": [
            {
              ""title"": ""Introduction to Asynchronous Programming"",
              ""content"": ""Learn the basics of asynchronous programming and how to use async and await keywords."",
              ""codeSnippets"": [
                {
                  ""language"": ""C#"",
                  ""code"": ""public async Task<int> CalculateSumAsync(int a, int b)\n{\n    await Task.Delay(1000);  // Simulate a delay\n    return a + b;\n}\n\nvar result = await CalculateSumAsync(5, 10);\nConsole.WriteLine(result);""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a method to fetch data from a web service asynchronously and display the result.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""C# in Practice"",
      ""description"": ""Apply your knowledge to real-world projects and advanced programming problems."",
      ""submodules"": [
        {
          ""title"": ""Building a Console Application"",
          ""content"": ""Step-by-step guide to building a complete console application from scratch."",
          ""tutorials"": [
            {
              ""title"": ""Planning Your Application"",
              ""content"": ""Learn how to plan and design your console application."",
              ""codeSnippets"": []
            },
            {
              ""title"": ""Implementing Features"",
              ""content"": ""Detailed guide on implementing features and functionality."",
              ""codeSnippets"": []
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Develop a console application that manages a simple library system, allowing users to add, view, and search for books.""
            }
          ]
        },
        {
          ""title"": ""Unit Testing"",
          ""content"": ""Learn the importance of unit testing and how to write unit tests for your C# code using frameworks like MSTest or NUnit."",
          ""tutorials"": [
            {
              ""title"": ""Introduction to Unit Testing"",
              ""content"": ""Overview of unit testing and setting up MSTest or NUnit in your project."",
              ""codeSnippets"": [
                {
                  ""language"": ""C#"",
                  ""code"": ""[TestClass]\npublic class CalculatorTests\n{\n    [TestMethod]\n    public void AddTest()\n    {\n        Calculator calc = new Calculator();\n        int result = calc.Add(2, 3);\n        Assert.AreEqual(5, result);\n    }\n}""
                }
              ]
            },
            {
              ""title"": ""Writing Your First Unit Test"",
              ""content"": ""Step-by-step tutorial on writing and running your first unit test."",
              ""codeSnippets"": []
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write unit tests for the methods in your library system application.""
            }
          ]
        }
      ]
    }
  ]
}",2,1,1,5,3,2024-09-28 17:20:44.823,1
40,1,TypeScript Expert Mastery,"{
    ""courseName"": ""TypeScript Expert Mastery"",
    ""duration"": ""3 Months"",
    ""modules"": [
        {
            ""title"": ""Advanced TypeScript"",
            ""description"": ""Delve into advanced TypeScript features and best practices."",
            ""submodules"": [
                {
                    ""title"": ""Advanced Types"",
                    ""content"": ""Explore intersection types, union types, mapped types, conditional types, and more."",
                    ""tutorials"": [
                        {
                            ""title"": ""Intersection and Union Types"",
                            ""content"": ""Understand how to use intersection and union types to create flexible and reusable types."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""typescript"",
                                    ""code"": ""type Combined = { a: number } & { b: string }; type EitherOr = { a: number } | { b: string };""
                                }
                            ]
                        },
                        {
                            ""title"": ""Mapped and Conditional Types"",
                            ""content"": ""Learn about mapped types that create new types based on existing ones and conditional types that allow type checking with conditions."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""typescript"",
                                    ""code"": ""type ReadOnly<T> = { readonly [P in keyof T]: T[P] }; type Check<T> = T extends string ? 'string' : 'other';""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Create a mapped type that converts all properties of a given type to optional.""
                        },
                        {
                            ""description"": ""Use conditional types to create a type that checks if a type T is a function.""
                        }
                    ]
                },
                {
                    ""title"": ""Generics Deep Dive"",
                    ""content"": ""Master the use of generics to create reusable and flexible components."",
                    ""tutorials"": [
                        {
                            ""title"": ""Generic Functions"",
                            ""content"": ""Understand how to create and use generic functions."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""typescript"",
                                    ""code"": ""function identity<T>(arg: T): T { return arg; }""
                                }
                            ]
                        },
                        {
                            ""title"": ""Generic Classes and Interfaces"",
                            ""content"": ""Explore the use of generics in classes and interfaces to enforce constraints and ensure consistency."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""typescript"",
                                    ""code"": ""class GenericNumber<T> { zeroValue: T; add: (x: T, y: T) => T; }""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Create a generic class that can handle a list of items and supports operations on them.""
                        },
                        {
                            ""description"": ""Implement a generic interface for a function that returns an array of the type it takes.""
                        }
                    ]
                },
                {
                    ""title"": ""TypeScript with React"",
                    ""content"": ""Integrate TypeScript with React for robust and type-safe React applications."",
                    ""tutorials"": [
                        {
                            ""title"": ""React Components with TypeScript"",
                            ""content"": ""Learn how to define props and state types for React components using TypeScript."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""typescript"",
                                    ""code"": ""type MyComponentProps = { title: string; }; const MyComponent: React.FC<MyComponentProps> = ({ title }) => { return <h1>{title}</h1>; };""
                                }
                            ]
                        },
                        {
                            ""title"": ""Hooks with TypeScript"",
                            ""content"": ""Understand how to use TypeScript with React hooks to ensure type safety."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""typescript"",
                                    ""code"": ""const [count, setCount] = useState<number>(0);""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Create a functional React component with TypeScript that accepts props and manages state.""
                        }
                    ]
                }
            ]
        },
        {
            ""title"": ""Performance Optimization and Best Practices"",
            ""description"": ""Learn to write high-performance and maintainable TypeScript code."",
            ""submodules"": [
                {
                    ""title"": ""TypeScript Compiler Options"",
                    ""content"": ""Explore advanced compiler options and configurations to enhance performance and development experience."",
                    ""tutorials"": [
                        {
                            ""title"": ""tsconfig.json Deep Dive"",
                            ""content"": ""Learn about different compiler options available in the tsconfig.json file."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""typescript"",
                                    ""code"": ""{ \""compilerOptions\"": { \""strict\"": true, \""noImplicitAny\"": true, \""target\"": \""ES6\"" } }""
                                }
                            ]
                        },
                        {
                            ""title"": ""Optimization Techniques"",
                            ""content"": ""Identify and implement techniques to optimize TypeScript code for performance."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""typescript"",
                                    ""code"": ""const sum = (a: number, b: number) => a + b;""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Configure a tsconfig.json file for a new TypeScript project with strict type-checking.""
                        },
                        {
                            ""description"": ""Refactor a piece of TypeScript code to improve its performance.""
                        }
                    ]
                },
                {
                    ""title"": ""Testing and Debugging"",
                    ""content"": ""Implement and understand testing and debugging techniques for TypeScript applications."",
                    ""tutorials"": [
                        {
                            ""title"": ""Unit Testing with TypeScript"",
                            ""content"": ""Use popular testing frameworks like Jest to write and run unit tests for TypeScript code."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""typescript"",
                                    ""code"": ""import { sum } from './sum'; test('adds 1 + 2 to equal 3', () => { expect(sum(1, 2)).toBe(3); });""
                                }
                            ]
                        },
                        {
                            ""title"": ""Debugging TypeScript Code"",
                            ""content"": ""Learn how to debug TypeScript code effectively using tools like Visual Studio Code."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""typescript"",
                                    ""code"": ""console.log('Debugging TypeScript code');""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Write unit tests for a TypeScript function using Jest.""
                        }
                    ]
                }
            ]
        },
        {
            ""title"": ""Real-World Projects and Case Studies"",
            ""description"": ""Apply your knowledge by working on real-world projects and studying existing applications."",
            ""submodules"": [
                {
                    ""title"": ""Project: Advanced TODO App"",
                    ""content"": ""Develop a fully-featured TODO application using TypeScript and React."",
                    ""tutorials"": [
                        {
                            ""title"": ""Setting up the Project"",
                            ""content"": ""Initialize a new React project with TypeScript and set up the basic structure."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""typescript"",
                                    ""code"": ""npx create-react-app my-todo-app --template typescript""
                                }
                            ]
                        },
                        {
                            ""title"": ""Implementing Features"",
                            ""content"": ""Implement various features such as adding, editing, deleting, and filtering TODO items."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""typescript"",
                                    ""code"": ""const addTodo = (text: string) => { /* ... */ };""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Add a feature to the TODO app that allows users to mark items as complete.""
                        },
                        {
                            ""description"": ""Implement a search functionality to filter TODO items.""
                        }
                    ]
                },
                {
                    ""title"": ""Case Study: Large Scale TypeScript Applications"",
                    ""content"": ""Study how large-scale TypeScript applications are structured and maintained."",
                    ""tutorials"": [
                        {
                            ""title"": ""Codebase Tour"",
                            ""content"": ""Explore and understand the structure of a large TypeScript codebase."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""typescript"",
                                    ""code"": ""/* Example of a well-structured TypeScript project */""
                                }
                            ]
                        },
                        {
                            ""title"": ""Best Practices in Large Applications"",
                            ""content"": ""Learn about best practices in coding, testing, and maintaining large TypeScript applications."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""typescript"",
                                    ""code"": ""/* Apply coding standards and practices */""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Refactor a piece of code in a large TypeScript project to improve readability and maintainability.""
                        },
                        {
                            ""description"": ""Identify potential performance bottlenecks and propose optimizations.""
                        }
                    ]
                }
            ]
        }
    ]
}",5,1,3,4,3,2024-09-28 17:26:49.053,1
41,1,Python Crash Course: Beginner to Advanced in 4 Weeks,"{
  ""courseName"": ""Python Crash Course: Beginner to Advanced in 4 Weeks"",
  ""modules"": [
    {
      ""title"": ""Week 1: Introduction to Python"",
      ""description"": ""Foundation concepts and basic syntax."",
      ""submodules"": [
        {
          ""title"": ""Setting Up the Environment"",
          ""content"": ""How to install Python, set up a code editor, and work with the interactive Python shell."",
          ""tutorials"": [
            {
              ""title"": ""Installing Python and Setting Up the IDE"",
              ""content"": ""Install Python from python.org, set up VSCode or PyCharm."",
              ""codeSnippets"": []
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Install Python, set up your IDE, and write a simple 'Hello, World!' program.""
            }
          ]
        },
        {
          ""title"": ""Basic Syntax and Data Types"",
          ""content"": ""Learn about variables, different data types, and basic operations."",
          ""tutorials"": [
            {
              ""title"": ""Introduction to Variables and Data Types"",
              ""content"": ""Discuss variables, different data types such as integers, floats, strings, and booleans."",
              ""codeSnippets"": [
                {
                  ""language"": ""Python"",
                  ""code"": ""x = 10\nname = 'Alice'\nis_student = True""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create variables of different types and print them.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Week 2: Control Flow and Functions"",
      ""description"": ""Conditionals, loops, and functions."",
      ""submodules"": [
        {
          ""title"": ""Conditionals and Loops"",
          ""content"": ""Learn about if-else statements, for loops, and while loops."",
          ""tutorials"": [
            {
              ""title"": ""Understanding If-Else Statements and Loops"",
              ""content"": ""Detail how to write if-else statements and loops, with examples."",
              ""codeSnippets"": [
                {
                  ""language"": ""Python"",
                  ""code"": ""if x > 0:\n    print('Positive')\nelse:\n    print('Negative or zero')\n\nfor i in range(5):\n    print(i)""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a program to categorize numbers as positive, negative, or zero. Print numbers from 1 to 10 using a loop.""
            }
          ]
        },
        {
          ""title"": ""Functions"",
          ""content"": ""Learn how to define and call functions, and understand scope and return values."",
          ""tutorials"": [
            {
              ""title"": ""Defining and Calling Functions"",
              ""content"": ""Detailed explanation of how to define a function, use parameters, and return values."",
              ""codeSnippets"": [
                {
                  ""language"": ""Python"",
                  ""code"": ""def greet(name):\n    return f'Hello, {name}!'\n\nprint(greet('Alice'))""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a function that takes a string parameter and returns it reversed.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Week 3: Data Structures and Object-Oriented Programming (OOP)"",
      ""description"": ""Concepts of lists, tuples, dictionaries, sets, and basics of OOP."",
      ""submodules"": [
        {
          ""title"": ""Data Structures"",
          ""content"": ""Understand lists, tuples, dictionaries, and sets."",
          ""tutorials"": [
            {
              ""title"": ""Working with Lists and Dictionaries"",
              ""content"": ""Explanation of lists and dictionaries with examples."",
              ""codeSnippets"": [
                {
                  ""language"": ""Python"",
                  ""code"": ""my_list = [1, 2, 3, 4]\nmy_dict = {'name': 'Alice', 'age': 25}""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a list of 5 numbers and print the sum. Create a dictionary and print values using keys.""
            }
          ]
        },
        {
          ""title"": ""Introduction to OOP"",
          ""content"": ""Learn about classes, objects, inheritance, and polymorphism."",
          ""tutorials"": [
            {
              ""title"": ""Creating Classes and Objects"",
              ""content"": ""Detailed tutorial on how to create and use classes and objects."",
              ""codeSnippets"": [
                {
                  ""language"": ""Python"",
                  ""code"": ""class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def greet(self):\n        return f'Hello, my name is {self.name} and I am {self.age} years old.'\n\nperson = Person('Alice', 30)\nprint(person.greet())""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a class representing a book, with attributes for title, author, and year.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Week 4: Advanced Topics and Final Project"",
      ""description"": ""Explore file handling, error handling, and work on a final project."",
      ""submodules"": [
        {
          ""title"": ""File Handling"",
          ""content"": ""Learn how to read from and write to files."",
          ""tutorials"": [
            {
              ""title"": ""Reading and Writing Files"",
              ""content"": ""Detailed explanation of file operations in Python."",
              ""codeSnippets"": [
                {
                  ""language"": ""Python"",
                  ""code"": ""with open('example.txt', 'w') as f:\n    f.write('Hello, World!')\n\nwith open('example.txt', 'r') as f:\n    print(f.read())""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a program to read from one file and write its content to another file.""
            }
          ]
        },
        {
          ""title"": ""Error Handling"",
          ""content"": ""Learn about try-except blocks and custom exceptions."",
          ""tutorials"": [
            {
              ""title"": ""Using Try-Except for Error Handling"",
              ""content"": ""Explain the try-except construct and how to handle exceptions."",
              ""codeSnippets"": [
                {
                  ""language"": ""Python"",
                  ""code"": ""try:\n    x = 1 / 0\nexcept ZeroDivisionError:\n    print('Cannot divide by zero!')""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a program that catches exceptions for invalid inputs and continues execution.""
            }
          ]
        },
        {
          ""title"": ""Final Project"",
          ""content"": ""Combine all the concepts learned to build a comprehensive project."",
          ""tutorials"": [
            {
              ""title"": ""Guidelines for Final Project"",
              ""content"": ""Tips and guidelines for choosing and implementing a final project."",
              ""codeSnippets"": []
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Build a command-line application to manage a simple contact list. The application should allow users to add, remove, and search for contacts.""
            }
          ]
        }
      ]
    }
  ]
}",3,1,1,3,2,2024-09-28 17:36:22.860,2
42,5,Beginner C# Programming Course,"{
  ""courseName"": ""Beginner C# Programming Course"",
  ""modules"": [
    {
      ""title"": ""Introduction to C#"",
      ""description"": ""Basic introduction to C# and setting up the development environment"",
      ""submodules"": [
        {
          ""title"": ""Getting Started"",
          ""content"": ""Learn about what C# is, its history, and how to set up the development environment."",
          ""tutorials"": [
            {
              ""title"": ""Introduction to C#"",
              ""content"": ""C# is a modern, object-oriented programming language developed by Microsoft. It's part of the .NET framework."",
              ""codeSnippets"": []
            },
            {
              ""title"": ""Setting Up the Development Environment"",
              ""content"": ""Download and install Visual Studio or Visual Studio Code."",
              ""codeSnippets"": []
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Set up Visual Studio or Visual Studio Code on your machine.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Basic Syntax and Structure"",
      ""description"": ""Introduction to the basic syntax and structure of C# programs."",
      ""submodules"": [
        {
          ""title"": ""Hello World"",
          ""content"": ""Write and understand your first C# program."",
          ""tutorials"": [
            {
              ""title"": ""Hello World Program"",
              ""content"": ""Your first C# program will print 'Hello World' to the console."",
              ""codeSnippets"": [
                {
                  ""language"": ""C#"",
                  ""code"": ""using System;\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(\""Hello, World!\"");\n    }\n}""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a new C# project and write a 'Hello World' program.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Variables and Data Types"",
      ""description"": ""Understanding variables and data types in C#."",
      ""submodules"": [
        {
          ""title"": ""Variables and Constants"",
          ""content"": ""Learn about different types of variables and constants."",
          ""tutorials"": [
            {
              ""title"": ""Variable Declaration and Initialization"",
              ""content"": ""Variables can store data of various types and are declared using specific syntax."",
              ""codeSnippets"": [
                {
                  ""language"": ""C#"",
                  ""code"": ""int number = 5;\nstring text = \""Hello\"";\nconst double PI = 3.14;""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Declare and initialize different types of variables.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Control Flow"",
      ""description"": ""Control flow statements in C# (if-else, switch, loops)."",
      ""submodules"": [
        {
          ""title"": ""Conditional Statements"",
          ""content"": ""Use if-else and switch statements to control the flow of your program."",
          ""tutorials"": [
            {
              ""title"": ""If-Else Statements"",
              ""content"": ""Control the flow of execution using if-else statements."",
              ""codeSnippets"": [
                {
                  ""language"": ""C#"",
                  ""code"": ""int num = 10;\nif (num > 5)\n{\n    Console.WriteLine(\""Greater than 5\"");\n}\nelse\n{\n    Console.WriteLine(\""5 or less\"");\n}""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a program that uses if-else statements to check if a number is positive, negative, or zero.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Functions and Methods"",
      ""description"": ""Defining and using functions and methods in C#."",
      ""submodules"": [
        {
          ""title"": ""Creating Methods"",
          ""content"": ""Define and call methods in C#."",
          ""tutorials"": [
            {
              ""title"": ""Simple Method"",
              ""content"": ""Learn how to create and call simple methods."",
              ""codeSnippets"": [
                {
                  ""language"": ""C#"",
                  ""code"": ""class Program\n{\n    static void Main()\n    {\n        PrintMessage();\n    }\n    static void PrintMessage()\n    {\n        Console.WriteLine(\""Hello from a method!\"");\n    }\n}""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a method that takes two numbers as parameters and returns their sum.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Object-Oriented Programming"",
      ""description"": ""Basics of object-oriented programming (OOP) in C#."",
      ""submodules"": [
        {
          ""title"": ""Classes and Objects"",
          ""content"": ""Introduction to classes and objects."",
          ""tutorials"": [
            {
              ""title"": ""Creating a Class and Object"",
              ""content"": ""Learn to create and use classes and objects."",
              ""codeSnippets"": [
                {
                  ""language"": ""C#"",
                  ""code"": ""class Person\n{\n    public string Name;\n    public int Age;\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Person person = new Person();\n        person.Name = \""John\"";\n        person.Age = 30;\n        Console.WriteLine(person.Name + \"" is \"" + person.Age + \"" years old.\"");\n    }\n}""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a class Car with properties Make and Model. Create an object of the class and display its properties.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Arrays and Collections"",
      ""description"": ""Using arrays and collections to store data."",
      ""submodules"": [
        {
          ""title"": ""Introduction to Arrays"",
          ""content"": ""Learn how to declare, initialize, and use arrays."",
          ""tutorials"": [
            {
              ""title"": ""Using Arrays"",
              ""content"": ""Arrays can store multiple values of the same type."",
              ""codeSnippets"": [
                {
                  ""language"": ""C#"",
                  ""code"": ""int[] numbers = {1, 2, 3, 4, 5};\nConsole.WriteLine(numbers[0]);""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create an array of 5 integers and display the sum of the elements.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Exception Handling"",
      ""description"": ""Handling errors and exceptions in C#."",
      ""submodules"": [
        {
          ""title"": ""Try-Catch Blocks"",
          ""content"": ""Learn how to use try-catch blocks to handle exceptions."",
          ""tutorials"": [
            {
              ""title"": ""Exception Handling"",
              ""content"": ""Use try-catch to handle potential errors in your program."",
              ""codeSnippets"": [
                {
                  ""language"": ""C#"",
                  ""code"": ""try\n{\n    int result = 10 / 0;\n}\ncatch (DivideByZeroException ex)\n{\n    Console.WriteLine(\""Cannot divide by zero!\"");\n}""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a program that catches a division by zero exception and displays an appropriate message.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""File I/O"",
      ""description"": ""Reading from and writing to files."",
      ""submodules"": [
        {
          ""title"": ""Reading and Writing Files"",
          ""content"": ""Learn how to read from and write to files."",
          ""tutorials"": [
            {
              ""title"": ""File I/O Operations"",
              ""content"": ""Use StreamReader and StreamWriter to manage files."",
              ""codeSnippets"": [
                {
                  ""language"": ""C#"",
                  ""code"": ""using System.IO;\n\nclass Program\n{\n    static void Main()\n    {\n        // Writing to a file\n        StreamWriter writer = new StreamWriter(\""example.txt\"");\n        writer.WriteLine(\""Hello, file!\"");\n        writer.Close();\n\n        // Reading from a file\n        StreamReader reader = new StreamReader(\""example.txt\"");\n        string content = reader.ReadToEnd();\n        Console.WriteLine(content);\n        reader.Close();\n    }\n}""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a program that writes an array of strings to a file and then reads the file and displays its content.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Basic Debugging"",
      ""description"": ""Introduction to debugging C# programs."",
      ""submodules"": [
        {
          ""title"": ""Debugging Basics"",
          ""content"": ""Learn basic techniques to debug your C# applications."",
          ""tutorials"": [
            {
              ""title"": ""Using the Debugger"",
              ""content"": ""Set breakpoints and step through your code."",
              ""codeSnippets"": []
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Introduce an intentional bug in a simple program and use the debugger to find and fix it.""
            }
          ]
        }
      ]
    }
  ]
}",2,1,1,1,2,2024-09-29 03:01:16.420,2
43,4,Java Mastery in 3 Months,"{
    ""courseName"": ""Java Mastery in 3 Months"",
    ""modules"": [
        {
            ""title"": ""Introduction to Java"",
            ""description"": ""Learn the basics of Java programming and set up the development environment."",
            ""submodules"": [
                {
                    ""title"": ""Getting Started with Java"",
                    ""content"": ""Introduction to Java, its history, and its features."",
                    ""tutorials"": [
                        {
                            ""title"": ""Setting Up Java Development Environment"",
                            ""content"": ""Install JDK, set up IDE (IntelliJ IDEA/Eclipse), and write your first Java program."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""Java"",
                                    ""code"": ""public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\""Hello, World!\"");\n    }\n}""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Install JDK and set up your preferred IDE. Write and run the HelloWorld program.""
                        }
                    ]
                }
            ]
        },
        {
            ""title"": ""Java Basics"",
            ""description"": ""Deep dive into Java basic syntax, data types, and common operations."",
            ""submodules"": [
                {
                    ""title"": ""Basic Syntax and Data Types"",
                    ""content"": ""Learn about variables, data types, operators, and control structures in Java."",
                    ""tutorials"": [
                        {
                            ""title"": ""Variables and Data Types"",
                            ""content"": ""Understand different data types available in Java and how to declare variables."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""Java"",
                                    ""code"": ""int number = 10;\nchar letter = 'A';\nboolean decision = true;\ndouble decimal = 10.99;""
                                }
                            ]
                        },
                        {
                            ""title"": ""Control Structures"",
                            ""content"": ""Learn about if-else, switch-case, loops (for, while, do-while) and their applications."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""Java"",
                                    ""code"": ""for (int i = 0; i < 5; i++) {\n    System.out.println(i);\n}\n\nint score = 70;\nif (score > 60) {\n    System.out.println(\""You passed!\"");\n} else {\n    System.out.println(\""You failed.\"");\n}""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Write a program to find the largest of three numbers using if-else structure.""
                        },
                        {
                            ""description"": ""Write a program that prints all even numbers from 1 to 100 using a loop.""
                        }
                    ]
                }
            ]
        },
        {
            ""title"": ""Object-Oriented Programming (OOP)"",
            ""description"": ""Understand the fundamental concepts of OOP in Java."",
            ""submodules"": [
                {
                    ""title"": ""Classes and Objects"",
                    ""content"": ""Learn how to define classes and create objects in Java."",
                    ""tutorials"": [
                        {
                            ""title"": ""Defining Classes and Objects"",
                            ""content"": ""Guide to defining a class, instantiating objects, and understanding constructors."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""Java"",
                                    ""code"": ""public class Car {\n    String color;\n    String model;\n\n    Car(String color, String model) {\n        this.color = color;\n        this.model = model;\n    }\n\n    void display() {\n        System.out.println(\""Color: \"" + color + \"", Model: \"" + model);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Car myCar = new Car(\""Red\"", \""Tesla\"");\n        myCar.display();\n    }\n}""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Create a Java class called 'Book' with attributes: title, author, and price. Add a method to display the book details.""
                        }
                    ]
                },
                {
                    ""title"": ""Inheritance and Polymorphism"",
                    ""content"": ""Learn about the principles of inheritance, method overriding, and polymorphism."",
                    ""tutorials"": [
                        {
                            ""title"": ""Inheritance"",
                            ""content"": ""Guide to extending classes and understanding the super keyword."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""Java"",
                                    ""code"": ""public class Animal {\n    void sound() {\n        System.out.println(\""Animal makes a sound\"");\n    }\n}\n\npublic class Dog extends Animal {\n    void sound() {\n        System.out.println(\""Dog barks\"");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Animal a = new Dog();\n        a.sound(); // Outputs: Dog barks\n    }\n}""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Create a base class 'Shape' with a method to calculate the area, and derive two classes 'Circle' and 'Rectangle' that override the method to compute their specific areas.""
                        }
                    ]
                }
            ]
        },
        {
            ""title"": ""Advanced Java Features"",
            ""description"": ""Learn more advanced topics in Java such as exceptions, file handling, collections, and threading."",
            ""submodules"": [
                {
                    ""title"": ""Exception Handling"",
                    ""content"": ""Learn how to handle runtime errors using try-catch, finally, and custom exceptions."",
                    ""tutorials"": [
                        {
                            ""title"": ""Basic Exception Handling"",
                            ""content"": ""Introduction to exceptions and handling them with try-catch blocks."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""Java"",
                                    ""code"": ""try {\n    int result = 10 / 0;\n} catch (ArithmeticException e) {\n    System.out.println(\""Cannot divide by zero: \"" + e);\n}""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Write a program that takes two numbers from the user and performs division. Implement error handling for division by zero.""
                        }
                    ]
                },
                {
                    ""title"": ""File I/O"",
                    ""content"": ""Learn how to read from and write to files in Java."",
                    ""tutorials"": [
                        {
                            ""title"": ""Reading and Writing Files"",
                            ""content"": ""Guide to using FileReader, BufferedReader, FileWriter, and BufferedWriter."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""Java"",
                                    ""code"": ""import java.io.*;\n\npublic class FileOperation {\n    public static void main(String[] args) {\n        // Writing to a file\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(\""example.txt\""))) {\n            writer.write(\""Hello, File!\"");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        // Reading from a file\n        try (BufferedReader reader = new BufferedReader(new FileReader(\""example.txt\""))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                System.out.println(line);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Write a program to read a file specified by the user and count the number of words in it.""
                        }
                    ]
                },
                {
                    ""title"": ""Collections"",
                    ""content"": ""Understand the Java Collections Framework and learn to use List, Set, and Map interfaces."",
                    ""tutorials"": [
                        {
                            ""title"": ""List and Set"",
                            ""content"": ""Overview and practical usage of ArrayList, LinkedList, and HashSet."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""Java"",
                                    ""code"": ""import java.util.*;\n\npublic class CollectionExample {\n    public static void main(String[] args) {\n        // Using ArrayList\n        List<String> list = new ArrayList<>();\n        list.add(\""Apple\"");\n        list.add(\""Banana\"");\n        System.out.println(list);\n\n        // Using HashSet\n        Set<String> set = new HashSet<>();\n        set.add(\""Apple\"");\n        set.add(\""Apple\""); // Duplicate, will not be added\n        System.out.println(set);\n    }\n}""
                                }
                            ]
                        },
                        {
                            ""title"": ""Map"",
                            ""content"": ""Overview and practical usage of HashMap, TreeMap."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""Java"",
                                    ""code"": ""import java.util.*;\n\npublic class MapExample {\n    public static void main(String[] args) {\n        // Using HashMap\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\""Apple\"", 10);\n        map.put(\""Banana\"", 20);\n        System.out.println(map);\n    }\n}""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Create a program that stores student names and their grades in a HashMap and prints the grade of a student given their name.""
                        }
                    ]
                },
                {
                    ""title"": ""Multithreading"",
                    ""content"": ""Introduction to multithreading and concurrent programming."",
                    ""tutorials"": [
                        {
                            ""title"": ""Creating Threads"",
                            ""content"": ""Learn how to create threads by extending Thread class and implementing Runnable interface."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""Java"",
                                    ""code"": ""public class MyThread extends Thread {\n    public void run() {\n        System.out.println(\""Thread running\"");\n    }\n\n    public static void main(String[] args) {\n        MyThread thread = new MyThread();\n        thread.start();\n    }\n}""
                                },
                                {
                                    ""language"": ""Java"",
                                    ""code"": ""public class MyRunnable implements Runnable {\n    public void run() {\n        System.out.println(\""Runnable running\"");\n    }\n\n    public static void main(String[] args) {\n        Thread thread = new Thread(new MyRunnable());\n        thread.start();\n    }\n}""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Create a multi-threaded program that prints numbers from 1 to 10 and another thread that prints numbers from 11 to 20.""
                        }
                    ]
                }
            ]
        },
        {
            ""title"": ""Java Advanced Topics"",
            ""description"": ""Learn advanced Java topics such as networking, JDBC, and design patterns."",
            ""submodules"": [
                {
                    ""title"": ""Java Networking"",
                    ""content"": ""Introduction to networking in Java, including sockets, server and client communication."",
                    ""tutorials"": [
                        {
                            ""title"": ""Socket Programming"",
                            ""content"": ""Create server and client applications using Java sockets."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""Java"",
                                    ""code"": ""// Server\nimport java.net.*;\nimport java.io.*;\n\npublic class Server {\n    public static void main(String[] args) throws IOException {\n        ServerSocket serverSocket = new ServerSocket(6666);\n        Socket socket = serverSocket.accept();\n        DataInputStream dis = new DataInputStream(socket.getInputStream());\n        String str = dis.readUTF();\n        System.out.println(\""Message from Client: \"" + str);\n        serverSocket.close();\n    }\n}\n\n// Client\nimport java.net.*;\nimport java.io.*;\n\npublic class Client {\n    public static void main(String[] args) throws IOException {\n        Socket socket = new Socket(\""localhost\"", 6666);\n        DataOutputStream dos = new DataOutputStream(socket.getOutputStream());\n        dos.writeUTF(\""Hello Server\"");\n        dos.flush();\n        dos.close();\n        socket.close();\n    }\n}""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Modify the above client-server application to include multiple client communication.""
                        }
                    ]
                },
                {
                    ""title"": ""Java Database Connectivity (JDBC)"",
                    ""content"": ""Learn how to connect and interact with databases using JDBC."",
                    ""tutorials"": [
                        {
                            ""title"": ""Connecting to a Database"",
                            ""content"": ""Setup JDBC, understand the DriverManager and connection process."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""Java"",
                                    ""code"": ""import java.sql.*;\n\npublic class DatabaseConnection {\n    public static void main(String[] args) {\n        try {\n            Connection connection = DriverManager.getConnection(\""jdbc:mysql://localhost:3306/mydatabase\"", \""root\"", \""password\"");\n            Statement statement = connection.createStatement();\n            ResultSet resultSet = statement.executeQuery(\""SELECT * FROM users\"");\n            while (resultSet.next()) {\n                System.out.println(resultSet.getString(\""username\""));\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n}""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Create a JDBC application to insert, update, and delete records in a database table.""
                        }
                    ]
                },
                {
                    ""title"": ""Design Patterns in Java"",
                    ""content"": ""Introduction to common design patterns used in Java applications."",
                    ""tutorials"": [
                        {
                            ""title"": ""Singleton Pattern"",
                            ""content"": ""Learn about the Singleton design pattern and its implementation."",
                            ""codeSnippets"": [
                                {
                                    ""language"": ""Java"",
                                    ""code"": ""public class Singleton {\n    private static Singleton instance;\n    private Singleton() {}\n    public static Singleton getInstance() {\n        if (instance == null) {\n            instance = new Singleton();\n        }\n        return instance;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Singleton singleton = Singleton.getInstance();\n    }\n}""
                                }
                            ]
                        }
                    ],
                    ""exercises"": [
                        {
                            ""description"": ""Implement the Factory design pattern to create objects of different classes based on user input.""
                        }
                    ]
                }
            ]
        }
    ]
}",1,1,1,4,3,2024-09-29 04:02:04.400,2
44,4,Python from Beginner to Intermediate,"{
  ""courseName"": ""Python from Beginner to Intermediate"",
  ""modules"": [
    {
      ""title"": ""Introduction to Python"",
      ""description"": ""An introduction to the basic concepts of Python programming."",
      ""subModules"": [
        {
          ""title"": ""Python Installation and Setup"",
          ""content"": ""Learn how to install Python and set up your programming environment."",
          ""tutorials"": [
            {
              ""title"": ""Installing Python"",
              ""content"": ""Step-by-step guide to installing Python on different operating systems."",
              ""codeSnippets"": []
            },
            {
              ""title"": ""Setting Up the IDE"",
              ""content"": ""Guide to setting up integrated development environments (IDE) like PyCharm, VSCode, or Jupyter Notebook."",
              ""codeSnippets"": []
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Install Python and set up your IDE.""
            }
          ]
        },
        {
          ""title"": ""Python Basics"",
          ""content"": ""Learn the basic syntax and data structures of Python."",
          ""tutorials"": [
            {
              ""title"": ""Hello World"",
              ""content"": ""Write your first Python program."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""print('Hello, World!')""
                }
              ]
            },
            {
              ""title"": ""Variables and Data Types"",
              ""content"": ""Learn about variables, strings, integers, floats, and booleans."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""x = 5\nname = 'Alice'\npi = 3.14\nis_student = True""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create variables of different data types and print them.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Control Structures"",
      ""description"": ""Understand and apply control structures like conditionals and loops."",
      ""subModules"": [
        {
          ""title"": ""Conditionals"",
          ""content"": ""Learn how to use if, else, and elif statements in Python."",
          ""tutorials"": [
            {
              ""title"": ""If Statements"",
              ""content"": ""Introduction to using if statements."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""x = 10\nif x > 5:\n    print('x is greater than 5')""
                }
              ]
            },
            {
              ""title"": ""Elif and Else Statements"",
              ""content"": ""Using elif and else statements to control the flow of your program."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""x = 10\nif x > 10:\n    print('x is greater than 10')\nelif x == 10:\n    print('x is 10')\nelse:\n    print('x is less than 10')""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a program that categorizes a number as positive, negative, or zero.""
            }
          ]
        },
        {
          ""title"": ""Loops"",
          ""content"": ""Learn how to use for loops and while loops in Python."",
          ""tutorials"": [
            {
              ""title"": ""For Loops"",
              ""content"": ""Using for loops to iterate over a sequence."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""for i in range(5):\n    print(i)""
                }
              ]
            },
            {
              ""title"": ""While Loops"",
              ""content"": ""Using while loops to repeat an action until a condition is met."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""x = 0\nwhile x < 5:\n    print(x)\n    x += 1""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a program that prints the first 10 numbers in the Fibonacci sequence.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Functions and Modules"",
      ""description"": ""Learn how to write reusable code using functions and import external modules."",
      ""subModules"": [
        {
          ""title"": ""Functions"",
          ""content"": ""Create and use functions to write reusable code."",
          ""tutorials"": [
            {
              ""title"": ""Defining Functions"",
              ""content"": ""Learn how to define your own functions"",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""def greet(name):\n    return f'Hello, {name}!'\n\nprint(greet('Alice'))""
                }
              ]
            },
            {
              ""title"": ""Function Arguments"",
              ""content"": ""Different types of function arguments and how to use them."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""def add(a, b):\n    return a + b\n\nprint(add(3, 4))""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a function that calculates the factorial of a number.""
            }
          ]
        },
        {
          ""title"": ""Modules"",
          ""content"": ""Learn to organize code and use external libraries."",
          ""tutorials"": [
            {
              ""title"": ""Importing Modules"",
              ""content"": ""Learn to import and use standard and third-party modules."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""import math\n\nprint(math.sqrt(16))""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Import the random module and use it to generate a random number.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Data Structures"",
      ""description"": ""Understand and use various data structures in Python."",
      ""subModules"": [
        {
          ""title"": ""Lists"",
          ""content"": ""Learn about lists and how to manipulate them."",
          ""tutorials"": [
            {
              ""title"": ""Creating and Accessing Lists"",
              ""content"": ""Introduction to lists, indexing, and slicing."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""fruits = ['apple', 'banana', 'cherry']\nprint(fruits[1])""
                }
              ]
            },
            {
              ""title"": ""List Methods"",
              ""content"": ""Learn common list methods like append, remove, and sort."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""fruits = ['apple', 'banana', 'cherry']\nfruits.append('orange')\nprint(fruits)""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a list of numbers and sort them in descending order.""
            }
          ]
        },
        {
          ""title"": ""Dictionaries"",
          ""content"": ""Learn about dictionaries and how to use them."",
          ""tutorials"": [
            {
              ""title"": ""Creating and Accessing Dictionaries"",
              ""content"": ""Introduction to dictionaries, keys, and values."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""student = {'name': 'Alice', 'age': 25}\nprint(student['name'])""
                }
              ]
            },
            {
              ""title"": ""Dictionary Methods"",
              ""content"": ""Learn common dictionary methods like items, keys, and values."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""student = {'name': 'Alice', 'age': 25}\nprint(student.items())""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a dictionary representing a phone book and access different entries.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Object-Oriented Programming"",
      ""description"": ""Introduction to object-oriented programming concepts in Python."",
      ""subModules"": [
        {
          ""title"": ""Classes and Objects"",
          ""content"": ""Learn the basics of classes and objects."",
          ""tutorials"": [
            {
              ""title"": ""Defining Classes"",
              ""content"": ""How to define a class and create an object."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""class Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nmy_dog = Dog('Buddy', 5)\nprint(my_dog.name)""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a class representing a car and instantiate different car objects.""
            }
          ]
        },
        {
          ""title"": ""Inheritance"",
          ""content"": ""Learn how to extend classes using inheritance."",
          ""tutorials"": [
            {
              ""title"": ""Creating Subclasses"",
              ""content"": ""How to create a subclass that inherits from a parent class."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""class Animal:\n    def __init__(self, name):\n        self.name = name\n\nclass Dog(Animal):\n    def speak(self):\n        return 'Woof!'\n\nmy_dog = Dog('Buddy')\nprint(my_dog.speak())""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a subclass for a specific type of vehicle that inherits from a general vehicle class.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""File Handling"",
      ""description"": ""Learn how to read from and write to files in Python."",
      ""subModules"": [
        {
          ""title"": ""Reading Files"",
          ""content"": ""Learn how to open and read files."",
          ""tutorials"": [
            {
              ""title"": ""Opening Files"",
              ""content"": ""How to open a file and read its contents."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""with open('example.txt', 'r') as file:\n    content = file.read()\n    print(content)""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a program that reads from a file and counts the number of words.""
            }
          ]
        },
        {
          ""title"": ""Writing Files"",
          ""content"": ""Learn how to open and write to files."",
          ""tutorials"": [
            {
              ""title"": ""Writing to Files"",
              ""content"": ""How to open a file and write data to it."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""with open('example.txt', 'w') as file:\n    file.write('Hello, World!')""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a program that takes user input and writes it to a file.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Error Handling"",
      ""description"": ""Introduction to handling errors and exceptions in Python."",
      ""subModules"": [
        {
          ""title"": ""Try and Except"",
          ""content"": ""Learn the basics of handling exceptions with try and except blocks."",
          ""tutorials"": [
            {
              ""title"": ""Basic Try-Except"",
              ""content"": ""How to use try and except to catch exceptions."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""try:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print('Cannot divide by zero')""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a program that handles an exception when trying to convert a string to an integer.""
            }
          ]
        },
        {
          ""title"": ""Finally"",
          ""content"": ""Learn how to use the finally block to execute code regardless of exceptions."",
          ""tutorials"": [
            {
              ""title"": ""Try-Except-Finally"",
              ""content"": ""Using try, except, and finally together."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""try:\n    number = int(input('Enter a number: '))\nexcept ValueError:\n    print('That is not a valid number')\nfinally:\n    print('Execution completed')""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a program that prompts the user for a file name, attempts to open the file, and handles errors appropriately.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Working with Libraries"",
      ""description"": ""Introduction to popular Python libraries and how to use them."",
      ""subModules"": [
        {
          ""title"": ""NumPy"",
          ""content"": ""Introduction to NumPy for numerical computing."",
          ""tutorials"": [
            {
              ""title"": ""NumPy Basics"",
              ""content"": ""Learn how to use NumPy for array manipulations."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""import numpy as np\n\narray = np.array([1, 2, 3, 4])\nprint(array)""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a NumPy array and perform basic operations like addition and multiplication.""
            }
          ]
        },
        {
          ""title"": ""Pandas"",
          ""content"": ""Introduction to Pandas for data analysis."",
          ""tutorials"": [
            {
              ""title"": ""Pandas Basics"",
              ""content"": ""Learn how to use Pandas for data manipulation."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""import pandas as pd\n\ndata = {'Name': ['Alice', 'Bob'], 'Age': [25, 30]}\ndf = pd.DataFrame(data)\nprint(df)""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a Pandas DataFrame from a dictionary and display it.""
            }
          ]
        },
        {
          ""title"": ""Matplotlib"",
          ""content"": ""Introduction to Matplotlib for data visualization."",
          ""tutorials"": [
            {
              ""title"": ""Matplotlib Basics"",
              ""content"": ""Learn how to create plots and charts using Matplotlib."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""import matplotlib.pyplot as plt\n\nx = [1, 2, 3, 4]\ny = [1, 4, 9, 16]\n\nplt.plot(x, y)\nplt.show()""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a line plot using Matplotlib with custom labels and titles.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Final Project"",
      ""description"": ""Apply everything you've learned in a final comprehensive project."",
      ""subModules"": [
        {
          ""title"": ""Project Planning"",
          ""content"": ""Learn how to plan and structure a Python project."",
          ""tutorials"": [
            {
              ""title"": ""Defining the Project"",
              ""content"": ""Choose a project topic and outline its requirements."",
              ""codeSnippets"": []
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a project plan detailing the goals and requirements of your project.""
            }
          ]
        },
        {
          ""title"": ""Implementation"",
          ""content"": ""Implement your final project using the skills you've acquired."",
          ""tutorials"": [
            {
              ""title"": ""Coding the Project"",
              ""content"": ""Step-by-step guide to implementing your project."",
              ""codeSnippets"": []
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Work on the implementation of your final project.""
            }
          ]
        },
        {
          ""title"": ""Testing and Debugging"",
          ""content"": ""Test and debug your project to ensure it works correctly."",
          ""tutorials"": [
            {
              ""title"": ""Testing Code"",
              ""content"": ""Learn how to test your code effectively."",
              ""codeSnippets"": []
            },
            {
              ""title"": ""Debugging Tips"",
              ""content"": ""Tips and tools for debugging your Python code."",
              ""codeSnippets"": []
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Test and debug your final project until it is error-free.""
            }
          ]
        }
      ]
    }
  ]
}",3,1,1,2,3,2024-09-29 05:13:39.167,2
45,1,Python Expertise In 3 Months,"{
  ""courseName"": ""Python Expertise In 3 Months"",
  ""modules"": [
    {
      ""title"": ""Advanced Python Concepts"",
      ""description"": ""Dive deep into advanced Python syntax, structures, and programming paradigms."",
      ""submodules"": [
        {
          ""title"": ""Object-Oriented Programming"",
          ""content"": ""Understanding classes, objects, inheritance, polymorphism, encapsulation in Python."",
          ""tutorials"": [
            {
              ""title"": ""OOP Basics in Python"",
              ""content"": ""Learn the basic principles of Object-Oriented Programming."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""class Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    def bark(self):\n        print('Woof!')""
                }
              ]
            },
            {
              ""title"": ""Inheritance and Polymorphism"",
              ""content"": ""Enhance your Python OOP skills with inheritance and polymorphism."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""class Animal:\n    def speak(self):\n        pass\n\nclass Dog(Animal):\n    def speak(self):\n        return 'Woof!'\n\nclass Cat(Animal):\n    def speak(self):\n        return 'Meow!'""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a class hierarchy for different types of vehicles that includes at least one abstract method and demonstrate polymorphism with it.""
            }
          ]
        },
        {
          ""title"": ""Decorators and Context Managers"",
          ""content"": ""Master the use of decorators and context managers in Python for more efficient coding."",
          ""tutorials"": [
            {
              ""title"": ""Function and Class Decorators"",
              ""content"": ""Learn how to use function and class decorators effectively."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""def decorator_function(original_function):\n    def wrapper_function(*args, **kwargs):\n        print('Wrapper executed this before {}'.format(original_function.__name__))\n        return original_function(*args, **kwargs)\n    return wrapper_function""
                }
              ]
            },
            {
              ""title"": ""Context Managers"",
              ""content"": ""Implement context managers using 'with' statement and 'contextlib' library."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""from contextlib import contextmanager\n@contextmanager\ndef open_file(file, mode):\n    f = open(file, mode)\n    try:\n        yield f\n    finally:\n        f.close()""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a custom context manager to manage database connections. Implement it both using a class and using the 'contextlib' library.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Data Structures and Algorithms"",
      ""description"": ""Enhance your problem-solving skills with in-depth knowledge of data structures and algorithms."",
      ""submodules"": [
        {
          ""title"": ""Built-in Data Structures"",
          ""content"": ""Learn about Python's built-in data structures like lists, dictionaries, sets, and tuples."",
          ""tutorials"": [
            {
              ""title"": ""Efficient Use of Lists and Dictionaries"",
              ""content"": ""Optimize code performance by using lists and dictionaries effectively."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""my_dict = {'key1': 'value1', 'key2': 'value2'}\nfor key, value in my_dict.items():\n    print(f'Key: {key}, Value: {value}')""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Given a list of numbers, use a dictionary to count the frequency of each number and print the results.""
            }
          ]
        },
        {
          ""title"": ""Custom Data Structures and Algorithm Complexity"",
          ""content"": ""Implement custom data structures and understand their time-complicity implications."",
          ""tutorials"": [
            {
              ""title"": ""Implementing a Linked List"",
              ""content"": ""Create and manipulate a linked list from scratch."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""class Node:\n    def __init__(self, data=None):\n        self.data = data\n        self.next = None\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    def insert(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n    def traverse(self):\n        current = self.head\n        while current:\n            print(current.data)\n            current = current.next""
                }
              ]
            },
            {
              ""title"": ""Algorithm Complexity Analysis"",
              ""content"": ""Analyze the time and space complexity of algorithms using Big O notation."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\nprint(bubble_sort([64, 34, 25, 12, 22, 11, 90]))""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Implement a queue using a singly linked list. Analyze its time complexity for enqueue and dequeue operations.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Web Development with Flask and Django"",
      ""description"": ""Master web development skills with Flask and Django frameworks."",
      ""submodules"": [
        {
          ""title"": ""Flask Basics"",
          ""content"": ""Learn the basics of Flask to create simple web applications."",
          ""tutorials"": [
            {
              ""title"": ""Setting up Flask"",
              ""content"": ""Guide on setting up and running a basic Flask application."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""from flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n    return 'Hello, World!'\n\nif __name__ == '__main__':\n    app.run(debug=True)""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a Flask application that handles user registration and login.""
            }
          ]
        },
        {
          ""title"": ""Django Basics"",
          ""content"": ""Understand the fundamentals of Django and how to create robust web applications."",
          ""tutorials"": [
            {
              ""title"": ""Setting up Django"",
              ""content"": ""Guide on setting up a Django project and creating a basic application."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""import os\nos.environ['DJANGO_SETTINGS_MODULE'] = 'mysite.settings'\n\nimport django\ndjango.setup()""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a Django application with models, views, and templates.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Data Science and Machine Learning"",
      ""description"": ""Explore data science techniques and machine learning models using Python."",
      ""submodules"": [
        {
          ""title"": ""Data Manipulation with Pandas"",
          ""content"": ""Learn how to manipulate and analyze data using the Pandas library."",
          ""tutorials"": [
            {
              ""title"": ""Pandas DataFrames"",
              ""content"": ""Introduction to Pandas DataFrames for easy data manipulation."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""import pandas as pd\ndata = {'name': ['Alice', 'Bob'], 'age': [24, 27]}\ndf = pd.DataFrame(data)\nprint(df)""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Load a CSV file into a Pandas DataFrame and perform some basic data manipulation (e.g., filtering rows, extracting columns).""
            }
          ]
        },
        {
          ""title"": ""Machine Learning with Scikit-Learn"",
          ""content"": ""Implement machine learning models using scikit-learn."",
          ""tutorials"": [
            {
              ""title"": ""Linear Regression"",
              ""content"": ""Introduction to linear regression using scikit-learn."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""from sklearn.linear_model import LinearRegression\nimport numpy as np\n\nX = np.array([[1, 1], [1, 2], [2, 2], [2, 3]])\ny = np.dot(X, np.array([1, 2])) + 3\n\nmodel = LinearRegression().fit(X, y)\nprint(model.predict(np.array([[3, 5]])))""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Load a dataset from scikit-learn and implement a logistic regression model to classify the data.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Concurrency and Parallelism"",
      ""description"": ""Master concurrency and parallelism in Python."",
      ""submodules"": [
        {
          ""title"": ""Threading"",
          ""content"": ""Introduction to threading in Python for concurrent execution."",
          ""tutorials"": [
            {
              ""title"": ""Using the threading module"",
              ""content"": ""Guide on creating and using threads in Python."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""import threading\n\ndef print_numbers():\n    for i in range(10):\n        print(i)\n        \nthread1 = threading.Thread(target=print_numbers)\nthread1.start()\nthread1.join()""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a multi-threaded program to download multiple files from the internet simultaneously.""
            }
          ]
        },
        {
          ""title"": ""Multiprocessing"",
          ""content"": ""Introduction to multiprocessing for parallel task execution."",
          ""tutorials"": [
            {
              ""title"": ""Using the multiprocessing module"",
              ""content"": ""Guide on creating and using processes in Python."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""from multiprocessing import Process\n\ndef print_numbers():\n    for i in range(10):\n        print(i)\n\nif __name__ == '__main__':\n    process = Process(target=print_numbers)\n    process.start()\n    process.join()""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a program that uses multiple processes to apply a function to each element in a large dataset.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Testing and Debugging"",
      ""description"": ""Enhance code reliability with comprehensive testing and debugging."",
      ""submodules"": [
        {
          ""title"": ""Unit Testing with pytest"",
          ""content"": ""Learn to write unit tests using the pytest framework."",
          ""tutorials"": [
            {
              ""title"": ""Writing Test Cases"",
              ""content"": ""Guide on writing and running test cases with pytest."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""def multiply(a, b):\n    return a * b\n\ndef test_multiply():\n    assert multiply(2, 3) == 6\n    assert multiply(0, 4) == 0""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a suite of unit tests to validate the correctness of a given mathematical function.""
            }
          ]
        },
        {
          ""title"": ""Debugging Techniques"",
          ""content"": ""Master debugging techniques and tools."",
          ""tutorials"": [
            {
              ""title"": ""Using pdb for Debugging"",
              ""content"": ""Introduction to using the pdb debugger in Python."",
              ""codeSnippets"": [
                {
                  ""language"": ""python"",
                  ""code"": ""import pdb\n\ndef faulty_function(x, y):\n    result = x / y\n    pdb.set_trace()  # Add a breakpoint\n    return result\n\nfaulty_function(10, 0)""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Debug a given piece of code using pdb and identify the source of errors.""
            }
          ]
        }
      ]
    }
  ]
}",3,1,2,4,3,2024-09-29 06:26:08.660,2
46,4,Introduction to JavaScript,"{
  ""courseName"": ""Introduction to JavaScript"",
  ""modules"": [
    {
      ""title"": ""Getting Started with JavaScript"",
      ""description"": ""Introduction to JavaScript basics and setup"",
      ""submodules"": [
        {
          ""title"": ""Introduction to JavaScript"",
          ""content"": ""Learn what JavaScript is, where it is used, and how it fits into web development."",
          ""tutorials"": [
            {
              ""title"": ""What is JavaScript?"",
              ""content"": ""JavaScript is a high-level programming language often used for web development. It allows you to implement complex features on web pages."",
              ""codeSnippets"": []
            },
            {
              ""title"": ""Setting Up Your Development Environment"",
              ""content"": ""Learn how to set up a development environment for writing JavaScript code, including installing Visual Studio Code and setting up Node.js."",
              ""codeSnippets"": []
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Research where JavaScript is used and write a short description of its applications.""
            }
          ]
        },
        {
          ""title"": ""Basic Syntax"",
          ""content"": ""Understand the basic syntax of JavaScript."",
          ""tutorials"": [
            {
              ""title"": ""JavaScript Syntax"",
              ""content"": ""Learn about JavaScript syntax such as comments, variables, data types, and operators."",
              ""codeSnippets"": [
                {
                  ""language"": ""JavaScript"",
                  ""code"": ""// This is a comment\nlet myVariable = 5; // Declaring a variable\nconst constantVariable = 'Hello'; // Declaring a constant\nconsole.log(myVariable); // Output: 5\nconsole.log(constantVariable); // Output: Hello""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a JavaScript file, declare variables of different data types, and use console.log() to print them.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Working with Data in JavaScript"",
      ""description"": ""Cover working with different data types, operators, and basic operations."",
      ""submodules"": [
        {
          ""title"": ""Variables and Data Types"",
          ""content"": ""Learn about JavaScript variables and the different data types you can use."",
          ""tutorials"": [
            {
              ""title"": ""Using Variables"",
              ""content"": ""Understand how to declare and use variables with 'let', 'const', and 'var'."",
              ""codeSnippets"": [
                {
                  ""language"": ""JavaScript"",
                  ""code"": ""let age = 25;\nconst name = 'John';\nvar isStudent = true;\nconsole.log(age);\nconsole.log(name);\nconsole.log(isStudent);""
                }
              ]
            },
            {
              ""title"": ""Data Types"",
              ""content"": ""Learn about different data types in JavaScript such as numbers, strings, booleans, and arrays."",
              ""codeSnippets"": [
                {
                  ""language"": ""JavaScript"",
                  ""code"": ""let number = 10;\nlet string = 'Hello';\nlet boolean = true;\nlet array = [1, 'two', 3];\nconsole.log(number);\nconsole.log(string);\nconsole.log(boolean);\nconsole.log(array);""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Declare variables of different data types and print them using console.log().""
            }
          ]
        },
        {
          ""title"": ""Operators"",
          ""content"": ""Learn about different operators in JavaScript."",
          ""tutorials"": [
            {
              ""title"": ""Arithmetic Operators"",
              ""content"": ""Learn how to use arithmetic operators like addition, subtraction, multiplication, and division."",
              ""codeSnippets"": [
                {
                  ""language"": ""JavaScript"",
                  ""code"": ""let sum = 10 + 5;\nlet difference = 10 - 5;\nlet product = 10 * 5;\nlet quotient = 10 / 5;\nconsole.log(sum);\nconsole.log(difference);\nconsole.log(product);\nconsole.log(quotient);""
                }
              ]
            },
            {
              ""title"": ""Assignment Operators"",
              ""content"": ""Understand assignment operators like =, +=, -=, *= and more."",
              ""codeSnippets"": [
                {
                  ""language"": ""JavaScript"",
                  ""code"": ""let a = 10;\na += 5; // equivalent to a = a + 5\nconsole.log(a); // Output: 15""
                }
              ]
            },
            {
              ""title"": ""Comparison Operators"",
              ""content"": ""Learn about comparison operators such as ==, ===, !=, >, <, >=, and <=."",
              ""codeSnippets"": [
                {
                  ""language"": ""JavaScript"",
                  ""code"": ""console.log(5 == '5'); // true\nconsole.log(5 === '5'); // false\nconsole.log(5 != 3); // true\nconsole.log(5 > 3); // true\nconsole.log(5 < 10); // true\nconsole.log(5 >= 5); // true\nconsole.log(5 <= 4); // false""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Use different operators to create and print out expressions.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Control Flow"",
      ""description"": ""Understand control flow structures like conditionals and loops."",
      ""submodules"": [
        {
          ""title"": ""Conditional Statements"",
          ""content"": ""Learn how to use if, else if, and else statements."",
          ""tutorials"": [
            {
              ""title"": ""Using If Statements"",
              ""content"": ""Understand how to use if statements for basic decision making."",
              ""codeSnippets"": [
                {
                  ""language"": ""JavaScript"",
                  ""code"": ""let age = 18;\nif (age >= 18) {\n  console.log('You are an adult.');\n} else {\n  console.log('You are a minor.');\n}""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a program that checks if a number is positive, negative, or zero.""
            }
          ]
        },
        {
          ""title"": ""Loops"",
          ""content"": ""Learn about different loops in JavaScript like while, for, and do-while."",
          ""tutorials"": [
            {
              ""title"": ""Using For Loops"",
              ""content"": ""Understand how to use for loops to iterate over a sequence."",
              ""codeSnippets"": [
                {
                  ""language"": ""JavaScript"",
                  ""code"": ""for (let i = 0; i < 5; i++) {\n  console.log(i);\n}""
                }
              ]
            },
            {
              ""title"": ""Using While Loops"",
              ""content"": ""Learn how to use while loops for repeated execution."",
              ""codeSnippets"": [
                {
                  ""language"": ""JavaScript"",
                  ""code"": ""let i = 0;\nwhile (i < 5) {\n  console.log(i);\n  i++;\n}""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Write a program that prints numbers from 1 to 10 using a for loop and a while loop.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Functions"",
      ""description"": ""Delve into functions and how to use them in JavaScript."",
      ""submodules"": [
        {
          ""title"": ""Function Basics"",
          ""content"": ""Learn how to define and call functions."",
          ""tutorials"": [
            {
              ""title"": ""Creating Functions"",
              ""content"": ""Understand how to create and use functions."",
              ""codeSnippets"": [
                {
                  ""language"": ""JavaScript"",
                  ""code"": ""function greet(name) {\n  return 'Hello ' + name + '!';\n}\nconsole.log(greet('Alice'));""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a function that takes two numbers as arguments and returns their sum.""
            }
          ]
        },
        {
          ""title"": ""Function Expressions"",
          ""content"": ""Learn about function expressions and anonymous functions."",
          ""tutorials"": [
            {
              ""title"": ""Using Function Expressions"",
              ""content"": ""Understand function expressions and how to use them."",
              ""codeSnippets"": [
                {
                  ""language"": ""JavaScript"",
                  ""code"": ""const multiply = function(a, b) {\n  return a * b;\n};\nconsole.log(multiply(2, 3));""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create an anonymous function that squares a number and assign it to a variable.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""DOM Manipulation"",
      ""description"": ""Basics of interacting with and manipulating the Document Object Model (DOM)."",
      ""submodules"": [
        {
          ""title"": ""Selecting Elements"",
          ""content"": ""Learn how to select HTML elements using JavaScript."",
          ""tutorials"": [
            {
              ""title"": ""Using document.querySelector"",
              ""content"": ""Understand how to select HTML elements with querySelector."",
              ""codeSnippets"": [
                {
                  ""language"": ""JavaScript"",
                  ""code"": ""let element = document.querySelector('p');\nconsole.log(element);""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Select an HTML element by its ID and change its text content.""
            }
          ]
        },
        {
          ""title"": ""Modifying Elements"",
          ""content"": ""Learn how to modify HTML elements using JavaScript."",
          ""tutorials"": [
            {
              ""title"": ""Changing Element Content"",
              ""content"": ""Learn how to change the text content and attributes of HTML elements."",
              ""codeSnippets"": [
                {
                  ""language"": ""JavaScript"",
                  ""code"": ""let element = document.querySelector('p');\nelement.textContent = 'Hello, World!';""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Change the text content of a div element using JavaScript.""
            }
          ]
        }
      ]
    },
    {
      ""title"": ""Events"",
      ""description"": ""Understand how to handle events in JavaScript."",
      ""submodules"": [
        {
          ""title"": ""Event Handling"",
          ""content"": ""Learn how to handle events like clicks, submits, and more."",
          ""tutorials"": [
            {
              ""title"": ""Adding Event Listeners"",
              ""content"": ""Understand how to add event listeners to HTML elements."",
              ""codeSnippets"": [
                {
                  ""language"": ""JavaScript"",
                  ""code"": ""let button = document.querySelector('button');\nbutton.addEventListener('click', function() {\n  alert('Button was clicked!');\n});""
                }
              ]
            }
          ],
          ""exercises"": [
            {
              ""description"": ""Create a button that shows an alert when clicked.""
            }
          ]
        }
      ]
    }
  ],
  ""resources"": {
    ""books"": [
      {
        ""title"": ""Eloquent JavaScript"",
        ""author"": ""Marijn Haverbeke"",
        ""link"": ""https://eloquentjavascript.net/""
      }
    ],
    ""websites"": [
      {
        ""name"": ""MDN Web Docs"",
        ""url"": ""https://developer.mozilla.org/en-US/docs/Web/JavaScript""
      },
      {
        ""name"": ""W3Schools"",
        ""url"": ""https://www.w3schools.com/js/""
      }
    ],
    ""videos"": [
      {
        ""title"": ""JavaScript Basics"",
        ""url"": ""https://www.youtube.com/watch?v=W6NZfCO5SIk""
      }
    ]
  }
}",4,1,1,1,1,2024-09-29 19:07:04.773,2
